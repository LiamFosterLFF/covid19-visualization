{"version":3,"sources":["countryNameDictionary.js","topojsons/all-jsons.js","components/Map.js","components/TotalChart.js","components/DailyChart.js","App.js","index.js"],"names":["countryNameDictionary","componentJsonDictionary","world","worldLowRes","ao","ar","am","au","at","az","bd","by","be","bt","bo","ba","bw","br","bn","bg","bf","bi","kh","cm","ca","cf","td","cl","cn","co","cd","cg","cr","hr","cu","cy","cz","dk","dj","ec","eg","sv","ee","et","fi","fr","ge","de","gr","gt","gn","ht","hn","hu","is","id","ir","iq","ie","il","it","jm","jp","kz","ke","xk","kg","la","lv","lt","lu","mk","my","ml","mx","md","me","ma","mm","np","nl","nz","ni","ng","no","om","pk","ps","pa","py","ph","pl","pt","qa","ro","ru","rw","sa","rs","sl","sk","si","za","kr","es","lk","se","ch","sy","tw","tj","th","tr","ug","ua","ae","gb","uy","us","uz","ve","vn","ye","Map","props","onClick","target","attributes","value","setCountry","setComponent","useState","layerProps","component","countryIdDictionary","Object","entries","key","provinceFills","country","keys","data","length","console","log","dataType","statistics","undefined","rise","total","increase","rainbow","Rainbow","setSpectrum","hueNo","hue","colourAt","Math","floor","MapStyling","styled","div","TotalChart","lineData","confirmed","graphArray","i","deaths","recovered","ChartStyling","width","height","dataKey","type","stroke","fill","DailyChart","chartData","barSize","App","calculatedData","setCalculatedData","countryData","setCountryData","setDataType","calculateStatistics","returnObj","countryNameList","forEach","includes","toLowerCase","push","maxDateTime","columns","d","dateTime","Date","getTime","isNaN","mostRecentDateStr","getMonth","getDate","getFullYear","worldTimeSeries","worldStatistics","filter","obj","timeSeries","province","Number","dateKey","date","worldGraphArray","worldTotal","worldIncrease","setSingularDataType","a","d3","setAllData","calculatedDataCopy","Promise","all","useEffect","then","totalTitles","setTotalTitles","className","style","float","ReactDOM","render","document","getElementById"],"mappings":"+hn2RA4HeA,G,OA5He,CAC1B,GAAO,SACP,GAAO,YACP,GAAO,UACP,GAAO,YACP,GAAO,UACP,GAAO,aACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,SACP,GAAO,UACP,GAAO,qBACP,GAAO,WACP,GAAO,SACP,GAAO,oBACP,GAAO,WACP,GAAO,eACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,SACP,GAAO,2BACP,GAAO,OACP,GAAO,QACP,GAAO,QACP,GAAO,WACP,GAAO,WACP,GAAO,QACP,GAAO,aACP,GAAO,UACP,GAAO,OACP,GAAO,SACP,GAAO,iBACP,GAAO,UACP,GAAO,WACP,GAAO,qBACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,UACP,GAAO,WACP,GAAO,UACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,SACP,GAAO,YACP,GAAO,SACP,GAAO,QACP,GAAO,WACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,OACP,GAAO,OACP,GAAO,UACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,QACP,GAAO,aACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,OACP,GAAO,SACP,GAAO,YACP,GAAO,aACP,GAAO,YACP,GAAO,WACP,GAAO,OACP,GAAO,SACP,GAAO,UACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,gBACP,GAAO,YACP,GAAO,UACP,GAAO,SACP,GAAO,OACP,GAAO,WACP,GAAO,YACP,GAAO,SACP,GAAO,WACP,GAAO,cACP,GAAO,SACP,GAAO,WACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,SACP,GAAO,eACP,GAAO,SACP,GAAO,eACP,GAAO,WACP,GAAO,WACP,GAAO,eACP,GAAO,cACP,GAAO,QACP,GAAO,YACP,GAAO,SACP,GAAO,cACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,WACP,GAAO,SACP,GAAO,SACP,GAAO,UACP,GAAO,uBACP,GAAO,iBACP,GAAO,UACP,GAAO,KA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","file":"static/js/main.5fbf4fda.chunk.js","sourcesContent":["const countryNameDictionary = {\n    \"ao\" : \"angola\",\n    \"ar\" : \"argentina\",\n    \"am\" : \"armenia\",\n    \"au\" : \"australia\",\n    \"at\" : \"austria\",\n    \"az\" : \"azerbaijan\",\n    \"bd\" : \"bangladesh\",\n    \"by\" : \"belarus\",\n    \"be\" : \"belgium\",\n    \"bt\" : \"bhutan\",\n    \"bo\" : \"bolivia\",\n    \"ba\" : \"bosnia herzegovina\",\n    \"bw\" : \"botswana\",\n    \"br\" : \"brazil\",\n    \"bn\" : \"brunei darussalam\",\n    \"bg\" : \"bulgaria\",\n    \"bf\" : \"burkina faso\",\n    \"bi\" : \"burundi\",\n    \"kh\" : \"cambodia\",\n    \"cm\" : \"cameroon\",\n    \"ca\" : \"canada\",\n    \"cf\" : \"central african republic\",\n    \"td\" : \"chad\",\n    \"cl\" : \"chile\",\n    \"cn\" : \"china\",\n    \"co\" : \"colombia\",\n    \"cd\" : \"congo dr\",\n    \"cg\" : \"congo\",\n    \"cr\" : \"costa rica\",\n    \"hr\" : \"croatia\",\n    \"cu\" : \"cuba\",\n    \"cy\" : \"cyprus\",\n    \"cz\" : \"czech republic\",\n    \"dk\" : \"denmark\",\n    \"dj\" : \"djibouti\",\n    \"do\" : \"dominican republic\",\n    \"ec\" : \"ecuador\",\n    \"eg\" : \"egypt\",\n    \"sv\" : \"el salvador\",\n    \"ee\" : \"estonia\",\n    \"et\" : \"ethiopia\",\n    \"fi\" : \"finland\",\n    \"fr\" : \"france\",\n    \"ge\" : \"georgia\",\n    \"de\" : \"germany\",\n    \"gr\" : \"greece\",\n    \"gt\" : \"guatemala\",\n    \"gn\" : \"guinea\",\n    \"ht\" : \"haiti\",\n    \"hn\" : \"honduras\",\n    \"hu\" : \"hungary\",\n    \"is\" : \"iceland\",\n    \"in\" : \"india\",\n    \"id\" : \"indonesia\",\n    \"ir\" : \"iran\",\n    \"iq\" : \"iraq\",\n    \"ie\" : \"ireland\",\n    \"il\" : \"israel\",\n    \"it\" : \"italy\",\n    \"jm\" : \"jamaica\",\n    \"jp\" : \"japan\",\n    \"kz\" : \"kazakhstan\",\n    \"ke\" : \"kenya\",\n    \"xk\" : \"kosovo\",\n    \"kg\" : \"kyrgyzstan\",\n    \"la\" : \"laos\",\n    \"lv\" : \"latvia\",\n    \"lt\" : \"lithuania\",\n    \"lu\" : \"luxembourg\",\n    \"mk\" : \"macedonia\",\n    \"my\" : \"malaysia\",\n    \"ml\" : \"mali\",\n    \"mx\" : \"mexico\",\n    \"md\" : \"moldova\",\n    \"me\" : \"montenegro\",\n    \"ma\" : \"morocco\",\n    \"mm\" : \"myanmar\",\n    \"np\" : \"nepal\",\n    \"nl\" : \"netherlands\",\n    \"nz\" : \"new zealand 2\",\n    \"ni\" : \"nicaragua\",\n    \"ng\" : \"nigeria\",\n    \"no\" : \"norway\",\n    \"om\" : \"oman\",\n    \"pk\" : \"pakistan\",\n    \"ps\" : \"palestine\",\n    \"pa\" : \"panama\",\n    \"py\" : \"paraguay\",\n    \"ph\" : \"philippines\",\n    \"pl\" : \"poland\",\n    \"pt\" : \"portugal\",\n    \"qa\" : \"qatar\",\n    \"ro\" : \"romania\",\n    \"ru\" : \"russia\",\n    \"rw\" : \"rwanda\",\n    \"sa\" : \"saudi arabia\",\n    \"rs\" : \"serbia\",\n    \"sl\" : \"sierra leone\",\n    \"sk\" : \"slovakia\",\n    \"si\" : \"slovenia\",\n    \"za\" : \"south africa\",\n    \"kr\" : \"south korea\",\n    \"es\" : \"spain\",\n    \"lk\" : \"sri lanka\",\n    \"se\" : \"sweden\",\n    \"ch\" : \"switzerland\",\n    \"sy\" : \"syria\",\n    \"tw\" : \"taiwan\",\n    \"tj\" : \"tajikistan\",\n    \"th\" : \"thailand\",\n    \"tr\" : \"turkey\",\n    \"ug\" : \"uganda\",\n    \"ua\" : \"ukraine\",\n    \"ae\" : \"united arab emirates\",\n    \"gb\" : \"united kingdom\",\n    \"uy\" : \"uruguay\",\n    \"us\" : \"us\",\n    \"uz\" : \"uzbekistan\",\n    \"ve\" : \"venezuela\",\n    \"vn\" : \"vietnam\",\n    \"ye\" : \"yemen\"\n}\n\nexport default countryNameDictionary;","import world from '../topojsons/world.json';\nimport worldLowRes from '../topojsons/world-low-res.json';\n\nimport ao from '../topojsons/angola.json';\nimport ar from '../topojsons/argentina.json';\nimport am from '../topojsons/armenia.json';\nimport au from '../topojsons/australia.json';\nimport at from '../topojsons/austria.json';\nimport az from '../topojsons/azerbaijan.json';\nimport bd from '../topojsons/bangladesh.json';\nimport by from '../topojsons/belarus.json';\nimport be from '../topojsons/belgium.json';\nimport bt from '../topojsons/bhutan.json';\nimport bo from '../topojsons/bolivia.json';\nimport ba from '../topojsons/bosnia-herzegovina.json';\nimport bw from '../topojsons/botswana.json';\nimport br from '../topojsons/brazil.json';\nimport bn from '../topojsons/brunei-darussalam.json';\nimport bg from '../topojsons/bulgaria.json';\nimport bf from '../topojsons/burkina-faso.json';\nimport bi from '../topojsons/burundi.json';\nimport kh from '../topojsons/cambodia.json';\nimport cm from '../topojsons/cameroon.json';\nimport ca from '../topojsons/canada.json';\nimport cf from '../topojsons/central-african-republic.json';\nimport td from '../topojsons/chad.json';\nimport cl from '../topojsons/chile.json';\nimport cn from '../topojsons/china.json';\nimport co from '../topojsons/colombia.json';\nimport cd from '../topojsons/congo-dr.json';\nimport cg from '../topojsons/congo.json';\nimport cr from '../topojsons/costa-rica.json';\nimport hr from '../topojsons/croatia.json';\nimport cu from '../topojsons/cuba.json';\nimport cy from '../topojsons/cyprus.json';\nimport cz from '../topojsons/czech-republic.json';\nimport dk from '../topojsons/denmark.json';\nimport dj from '../topojsons/djibouti.json';\nimport dom from '../topojsons/dominican-republic.json';\nimport ec from '../topojsons/ecuador.json';\nimport eg from '../topojsons/egypt.json';\nimport sv from '../topojsons/el-salvador.json';\nimport ee from '../topojsons/estonia.json';\nimport et from '../topojsons/ethiopia.json';\nimport fi from '../topojsons/finland.json';\nimport fr from '../topojsons/france.json';\nimport ge from '../topojsons/georgia.json';\nimport de from '../topojsons/germany.json';\nimport gr from '../topojsons/greece.json';\nimport gt from '../topojsons/guatemala.json';\nimport gn from '../topojsons/guinea.json';\nimport ht from '../topojsons/haiti.json';\nimport hn from '../topojsons/honduras.json';\nimport hu from '../topojsons/hungary.json';\nimport is from '../topojsons/iceland.json';\nimport ind from '../topojsons/india.json';\nimport id from '../topojsons/indonesia.json';\nimport ir from '../topojsons/iran.json';\nimport iq from '../topojsons/iraq.json';\nimport ie from '../topojsons/ireland.json';\nimport il from '../topojsons/israel.json';\nimport it from '../topojsons/italy.json';\nimport jm from '../topojsons/jamaica.json';\nimport jp from '../topojsons/japan.json';\nimport kz from '../topojsons/kazakhstan.json';\nimport ke from '../topojsons/kenya.json';\nimport xk from '../topojsons/kosovo.json';\nimport kg from '../topojsons/kyrgyzstan.json';\nimport la from '../topojsons/laos.json';\nimport lv from '../topojsons/latvia.json';\nimport lt from '../topojsons/lithuania.json';\nimport lu from '../topojsons/luxembourg.json';\nimport mk from '../topojsons/macedonia.json';\nimport my from '../topojsons/malaysia.json';\nimport ml from '../topojsons/mali.json';\nimport mx from '../topojsons/mexico.json';\nimport md from '../topojsons/moldova.json';\nimport me from '../topojsons/montenegro.json';\nimport ma from '../topojsons/morocco.json';\nimport mm from '../topojsons/myanmar.json';\nimport np from '../topojsons/nepal.json';\nimport nl from '../topojsons/netherlands.json';\nimport nz from '../topojsons/new-zealand-2.json';\nimport ni from '../topojsons/nicaragua.json';\nimport ng from '../topojsons/nigeria.json';\nimport no from '../topojsons/norway.json';\nimport om from '../topojsons/oman.json';\nimport pk from '../topojsons/pakistan.json';\nimport ps from '../topojsons/palestine.json';\nimport pa from '../topojsons/panama.json';\nimport py from '../topojsons/paraguay.json';\nimport ph from '../topojsons/philippines.json';\nimport pl from '../topojsons/poland.json';\nimport pt from '../topojsons/portugal.json';\nimport qa from '../topojsons/qatar.json';\nimport ro from '../topojsons/romania.json';\nimport ru from '../topojsons/russia.json';\nimport rw from '../topojsons/rwanda.json';\nimport sa from '../topojsons/saudi-arabia.json';\nimport rs from '../topojsons/serbia.json';\nimport sl from '../topojsons/sierra-leone.json';\nimport sk from '../topojsons/slovakia.json';\nimport si from '../topojsons/slovenia.json';\nimport za from '../topojsons/south-africa.json';\nimport kr from '../topojsons/south-korea.json';\nimport es from '../topojsons/spain.json';\nimport lk from '../topojsons/sri-lanka.json';\nimport se from '../topojsons/sweden.json';\nimport ch from '../topojsons/switzerland.json';\nimport sy from '../topojsons/syria.json';\nimport tw from '../topojsons/taiwan.json';\nimport tj from '../topojsons/tajikistan.json';\nimport th from '../topojsons/thailand.json';\nimport tr from '../topojsons/turkey.json';\nimport ug from '../topojsons/uganda.json';\nimport ua from '../topojsons/ukraine.json';\nimport ae from '../topojsons/united-arab-emirates.json';\nimport gb from '../topojsons/united-kingdom.json';\nimport uy from '../topojsons/uruguay.json';\nimport us from '../topojsons/usa.json';\nimport uz from '../topojsons/uzbekistan.json';\nimport ve from '../topojsons/venezuela.json';\nimport vn from '../topojsons/vietnam.json';\nimport ye from '../topojsons/yemen.json';\n\n// import xy from '../topojsons/andorra.json';\n// import bh from '../topojsons/bahamas.json';\n// import xy from '../topojsons/bahrain.json';\n// import ba from '../topojsons/bosnia-herzegovina-2.json';\n// import xy from '../topojsons/cape-verde.json';\n// import cl from '../topojsons/chile-2.json';\n// import xy from '../topojsons/empty.json';\n// import xy from '../topojsons/faroeIslands.json';\n// import xy from '../topojsons/france-departments.json';\n// import xy from '../topojsons/france-new.json';\n// import xy from '../topojsons/hong-kong.json';\n// import xy from '../topojsons/liechtenstein.json';\n// import xy from '../topojsons/malta.json';\n// import xy from '../topojsons/new-zealand.json';\n// import xy from '../topojsons/portugal-regions.json';\n// import xy from '../topojsons/san-marino.json';\n// import xy from '../topojsons/serbia-without-kosovo.json';\n// import xy from '../topojsons/singapore.json';\n// import xy from '../topojsons/south-africa-2.json';\n// import xy from '../topojsons/spain-provinces.json';\n// import gb from '../topojsons/united-kingdom-counties.json';\n// import xy from '../topojsons/usa-not-calibrated.json';\n// import us from '../topojsons/usa-with-AK-HI.json';\n// import xy from '../topojsons/vietnam-with-islands.json';\n\n// import xy from '../topojsons/usa-ak.json';\n// import xy from '../topojsons/usa-al.json';\n// import xy from '../topojsons/usa-ar.json';\n// import xy from '../topojsons/usa-az.json';\n// import xy from '../topojsons/usa-ca.json';\n// import xy from '../topojsons/usa-co.json';\n// import xy from '../topojsons/usa-ct.json';\n// import xy from '../topojsons/usa-de.json';\n// import xy from '../topojsons/usa-fl.json';\n// import xy from '../topojsons/usa-ga.json';\n// import xy from '../topojsons/usa-hi.json';\n// import xy from '../topojsons/usa-ia.json';\n// import xy from '../topojsons/usa-id.json';\n// import xy from '../topojsons/usa-il.json';\n// import xy from '../topojsons/usa-in.json';\n// import xy from '../topojsons/usa-ks.json';\n// import xy from '../topojsons/usa-ky.json';\n// import xy from '../topojsons/usa-la.json';\n// import xy from '../topojsons/usa-ma.json';\n// import xy from '../topojsons/usa-md.json';\n// import xy from '../topojsons/usa-me.json';\n// import xy from '../topojsons/usa-mi.json';\n// import xy from '../topojsons/usa-mn.json';\n// import xy from '../topojsons/usa-mo.json';\n// import xy from '../topojsons/usa-ms.json';\n// import xy from '../topojsons/usa-mt.json';\n// import xy from '../topojsons/usa-nc.json';\n// import xy from '../topojsons/usa-nd.json';\n// import xy from '../topojsons/usa-ne.json';\n// import xy from '../topojsons/usa-nh.json';\n// import xy from '../topojsons/usa-nj.json';\n// import xy from '../topojsons/usa-nm.json';\n// import xy from '../topojsons/usa-nv.json';\n// import xy from '../topojsons/usa-ny.json';\n// import xy from '../topojsons/usa-oh.json';\n// import xy from '../topojsons/usa-ok.json';\n// import xy from '../topojsons/usa-or.json';\n// import xy from '../topojsons/usa-pa.json';\n// import xy from '../topojsons/usa-ri.json';\n// import xy from '../topojsons/usa-sc.json';\n// import xy from '../topojsons/usa-sd.json';\n// import xy from '../topojsons/usa-tn.json';\n// import xy from '../topojsons/usa-tx.json';\n// import xy from '../topojsons/usa-ut.json';\n// import xy from '../topojsons/usa-va.json';\n// import xy from '../topojsons/usa-vt.json';\n// import xy from '../topojsons/usa-wa.json';\n// import xy from '../topojsons/usa-wdc.json';\n// import xy from '../topojsons/usa-wi.json';\n// import xy from '../topojsons/usa-wv.json';\n// import xy from '../topojsons/usa-wy.json';\n\nconst componentJsonDictionary = {\n        world,\n        worldLowRes,\n        ao,\n        ar,\n        am,\n        au,\n        at,\n        az,\n        bd,\n        by,\n        be,\n        bt,\n        bo,\n        ba,\n        bw,\n        br,\n        bn,\n        bg,\n        bf,\n        bi,\n        kh,\n        cm,\n        ca,\n        cf,\n        td,\n        cl,\n        cn,\n        co,\n        cd,\n        cg,\n        cr,\n        hr,\n        cu,\n        cy,\n        cz,\n        dk,\n        dj,\n        \"do\": dom,\n        ec,\n        eg,\n        sv,\n        ee,\n        et,\n        fi,\n        fr,\n        ge,\n        de,\n        gr,\n        gt,\n        gn,\n        ht,\n        hn,\n        hu,\n        is,\n        \"in\": ind,\n        id,\n        ir,\n        iq,\n        ie,\n        il,\n        it,\n        jm,\n        jp,\n        kz,\n        ke,\n        xk,\n        kg,\n        la,\n        lv,\n        lt,\n        lu,\n        mk,\n        my,\n        ml,\n        mx,\n        md,\n        me,\n        ma,\n        mm,\n        np,\n        nl,\n        nz,\n        ni,\n        ng,\n        no,\n        om,\n        pk,\n        ps,\n        pa,\n        py,\n        ph,\n        pl,\n        pt,\n        qa,\n        ro,\n        ru,\n        rw,\n        sa,\n        rs,\n        sl,\n        sk,\n        si,\n        za,\n        kr,\n        es,\n        lk,\n        se,\n        ch,\n        sy,\n        tw,\n        tj,\n        th,\n        tr,\n        ug,\n        ua,\n        ae,\n        gb,\n        uy,\n        us,\n        uz,\n        ve,\n        vn,\n        ye\n    }\nexport default  componentJsonDictionary \n// \n// \n// ","import React, { useState, useEffect } from 'react';\nimport componentJsonDictionary from '../topojsons/all-jsons.js';\n\nimport styled from 'styled-components'\nimport { VectorMap } from '@south-paw/react-vector-maps';\nimport countryNameDictionary from '../countryNameDictionary.js';\nimport Rainbow from 'rainbowvis.js';\n\n\n\nconst Map = (props) => {\n    const onClick = ({ target }) => {\n        const id = target.attributes.id.value;\n        if (id in componentJsonDictionary) {\n            props.setCountry(countryNameDictionary[id])\n            setComponent(<VectorMap {...componentJsonDictionary[id]}/>)\n        } else {\n            \n        }\n    }\n\n    const [component, setComponent] = useState(<VectorMap {...componentJsonDictionary[\"worldLowRes\"]} layerProps={{ onClick }} />);\n    \n    // Make a lookup dictionary (Easier to lookup by IDs vs country names, b/c capitalization)\n    const countryIdDictionary = {};\n    for (let [key, value] of Object.entries(countryNameDictionary)) {\n        countryIdDictionary[value] = key;\n    }\n    \n    let provinceFills = \"\";\n    if ((props.country === \"world\") && (Object.keys(props.data).length !== 0)) { // Before data has loaded, object will be empty\n        console.log(\"a\", props.country, props.data[\"world\"][props.dataType].statistics, props.data);\n        \n        for (let [key, value] of Object.entries(props.data[\"world\"][props.dataType].statistics)) { // Get statistics of recent deaths\n            const id = countryIdDictionary[key];\n            if (id !== undefined) { // Object is in dictionary (not a boat or small country etc)\n                \n                // Fill country with color going from green (low proportionate rise in cases) to red (high rise)\n                // Percentage as a percentage of 30%, representing a doubling time of 2.5 days \n                const rise = (value.total > 0) ? ((value.increase/value.total) / .15) : 0; \n\n                // Set a custom color gradient from 0=green to 100=red\n                const rainbow = new Rainbow();\n                rainbow.setSpectrum('#2eff00', '#ff0000')\n                \n                let hueNo;\n                if (props.dataType === \"recovered\") {\n                    hueNo = 100 - rise*100;\n                } else if (rise * 100 > 100) {\n                    hueNo = 100;\n                } else {\n                    hueNo = rise * 100;\n                }\n                \n                const hue = rainbow.colourAt(Math.floor(hueNo))\n                \n                provinceFills += `&[id=\"${id}\"] {fill: #${hue}}`\n\n            }\n        }\n\n    }\n    \n    const MapStyling = styled.div`\n    width: 50%;\n    float: left;\n    svg{ \n        stroke: #fff;\n        fill: grey;\n        margin: 0% 5% ;\n\n        path {\n            ${provinceFills}\n            &:hover {\n                fill: rgb(249, 0, 0);\n                cursor: pointer;\n            }\n        }\n    }`;\n    \n\n    \n    const backClick = () => {\n        props.setCountry(\"world\")\n        setComponent(<VectorMap {...componentJsonDictionary[\"worldLowRes\"]} layerProps={{ onClick }} />)\n    }\n\n\n\n    return (\n        <div>\n            <MapStyling>\n                <button onClick={backClick}>World Map</button>\n                {component}\n            </MapStyling>\n\n        </div>\n    )\n}\n\nexport default Map;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { AreaChart, Area, XAxis, YAxis } from 'recharts';\n\nconst TotalChart = (props) => {\n  let lineData;\n  if (Object.keys(props.data).length !== 0) {\n    lineData = [...props.data.confirmed.graphArray]\n    \n    \n    for (let i = 0; i < lineData.length; i++) {\n      lineData[i][\"deaths\"] = props.data.deaths.graphArray[i].total\n      lineData[i][\"recovered\"] = props.data.recovered.graphArray[i].total\n    }\n  }\n  \n  \n  const ChartStyling = styled.div`\n      svg{ \n          // height: 50%;\n          // display: inline;\n          // top: 250px;\n          // left: 850px;\n          }\n      }`;\n  \n  return (\n    <ChartStyling>\n      <AreaChart width={600} height={200} data={lineData}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Area type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\n        <Area type=\"monotone\" dataKey=\"deaths\" stroke=\"#f72e2e\" fill=\"#f72e2e\" />\n        <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#54ed40\" fill=\"#54ed40\" />\n      </AreaChart>\n    </ChartStyling>\n  )\n}\n\nexport default TotalChart;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { BarChart, Bar } from 'recharts';\nimport XAxis from 'recharts/lib/cartesian/XAxis';\nimport YAxis from 'recharts/lib/cartesian/YAxis';\n\nconst DailyChart = (props) => {\n  let chartData = {};\n\n  if (Object.keys(props.data).length !== 0) {\n    chartData = props.data[props.dataType].graphArray\n  }\n\n\n  const ChartStyling = styled.div`\n      svg{ \n          // height: 50%;\n          // display: inlin;\n          // top: 250px;\n          // left: 850px;\n          }\n      }`;\n  \n  return (\n    <ChartStyling>\n      <BarChart width={600} height={200} data={chartData}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Bar barSize={10} dataKey=\"increase\" fill=\"#8884d8\" />\n      </BarChart>\n    </ChartStyling>\n  )\n}\n\nexport default DailyChart;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport countryNameDictionary from './countryNameDictionary.js';\n\nimport Map from \"./components/Map\";\nimport TotalChart from \"./components/TotalChart\";\nimport DailyChart from \"./components/DailyChart\";\n\nimport * as d3 from 'd3';\n\n\nconst App = () => {\n  \n  const [calculatedData, setCalculatedData] = useState({})\n  const [country, setCountry] = useState(\"world\")\n  const [countryData, setCountryData] = useState({});\n  const [dataType, setDataType] = useState(\"confirmed\")\n\n  const calculateStatistics = (data, dataType, returnObj) => {\n    // Get a list of all unique country namds\n    const countryNameList = [];\n    data.forEach((country) => {\n      if ((country[\"Country/Region\"] !== \"\") && !(countryNameList.includes(country[\"Country/Region\"].toLowerCase()))) {\n        countryNameList.push(country[\"Country/Region\"].toLowerCase())\n      }\n    })\n    \n    let maxDateTime = 0;\n    for (let d of data.columns) {\n      const dateTime = (new Date(d)).getTime(); // Create a date object and convert to dateTime\n      if (!isNaN(dateTime)) { // Check if dateTime is valid\n        if (dateTime > maxDateTime) { // Check if more recent\n          maxDateTime = dateTime\n        }\n      }\n    }\n    const d = new Date(maxDateTime)\n    const mostRecentDateStr = `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear() - 2000}`; // Set to valid format for chart\n\n    console.log(mostRecentDateStr);\n    \n    \n    const worldTimeSeries = {}; // Creata a time series object for all the countries combined into one\n    // Also create objects containing the totals and most recent daily increase\n    const worldStatistics = {};\n    countryNameList.forEach((country) => {\n      const countryData = data.filter((obj) => obj[\"Country/Region\"].toLowerCase() === country)\n      \n      // Combine the data for all provinces for given Country\n      const timeSeries = {};\n\n      countryData.forEach((province) => {\n          for (let [key, value] of Object.entries(province)) {\n            if(!isNaN(key[0])) {\n              timeSeries[key] = (timeSeries[key]) ? timeSeries[key] + Number(value): Number(value);\n            }\n          }\n        })\n\n        // Push totals to an object to be used in drawing the graph\n        const graphArray = []; \n        for (let [key, value] of Object.entries(timeSeries)) {\n            const dateKey = { country: country, date: key, total: value };\n            graphArray.push(dateKey);\n\n            // Take this opportunity to also add up the daily totals for the whole world\n            worldTimeSeries[key] = (worldTimeSeries[key]) ? worldTimeSeries[key] + Number(value): Number(value);\n            \n        }\n\n        // Calculate rise per day by subtracting each new date from previous in graph array\n        for (let i = 1; i < graphArray.length; i++) {\n          graphArray[i][\"increase\"] = graphArray[i].total - graphArray[i - 1].total     \n        }\n \n        // Set provincial statistics for that country (if from a certain list)\n        // statistics[country] = {};\n        // statistics[country][\"increase\"] = graphArray[graphArray.length - 1][\"increase\"];\n\n        // const statistics = {};\n\n        // if ([\"Australia\", \"Canada\", \"China\"].contains country[\"Country/State\"] !== \"\") {\n        //   statistics[province[\"Province/State\"]] = {};\n        //   statistics[province[\"Province/State\"]][\"total\"] = province[mostRecentDateStr];\n        //   const secondMostRecentDateStr = \"4/9/20\";\n        //   statistics[province[\"Province/State\"]][\"increase\"] = province[mostRecentDateStr] - province[secondMostRecentDateStr];\n\n        //   console.log(statistics);\n        // }\n\n        // Set world statistics on that country\n        worldStatistics[country] = {};\n        const total = timeSeries[mostRecentDateStr];\n        worldStatistics[country][\"total\"] = total;\n        worldStatistics[country][\"increase\"] = graphArray[graphArray.length - 1][\"increase\"];\n\n        // Push to returned object, with update for that specific data type\n        returnObj[country] = (returnObj[country]) ? returnObj[country] : {};\n        returnObj[country][dataType] = { timeSeries, graphArray, total}\n        \n    })\n    \n\n    // Push totals to an object to be used in drawing the graph for whole world\n    const worldGraphArray = []; \n    for (let [key, value] of Object.entries(worldTimeSeries)) {\n        const dateKey = {country: country, date: key, total: value };\n        worldGraphArray.push(dateKey);\n    }\n\n    // Calculate rise per day for whole world by subtracting each new date from previous in graph array\n    for (let i = 1; i < worldGraphArray.length; i++) {\n      worldGraphArray[i][\"increase\"] = worldGraphArray[i].total - worldGraphArray[i - 1].total     \n    }\n\n    // Set statistics for entire world\n    const worldTotal = worldTimeSeries[mostRecentDateStr];\n    const worldIncrease = worldGraphArray[worldGraphArray.length - 1][\"increase\"];\n    worldStatistics[\"world\"] = {};\n    worldStatistics[\"world\"][\"total\"] = worldTotal;\n    worldStatistics[\"world\"][\"increase\"] = worldIncrease;\n    worldStatistics[\"world\"][\"provinces\"] = worldStatistics;\n\n    // Push totals for whole world to world property of returned object\n    returnObj[\"world\"] = (returnObj[\"world\"]) ? returnObj[\"world\"] : {};\n    returnObj[\"world\"][dataType] = { 'timeSeries': worldTimeSeries, 'graphArray': worldGraphArray, \"statistics\" : worldStatistics, \"total\": worldTotal, \"increase\": worldIncrease }\n\n    return returnObj\n  }\n\n  const setSingularDataType = async (dataType, returnObj) => { // Sets one data type at a time, saves on copy/paste\n    const data = await d3.csv(`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${dataType}_global.csv`)\n    \n    return calculateStatistics(data, dataType, returnObj);\n\n  }\n\n  const setAllData = async () => { // Sets all 3 data types\n    const calculatedDataCopy = {}; \n    await Promise.all(\n      [ setSingularDataType(\"confirmed\", calculatedDataCopy),\n      setSingularDataType(\"deaths\", calculatedDataCopy),\n      setSingularDataType(\"recovered\", calculatedDataCopy)]\n    )\n    \n    return calculatedDataCopy\n\n  } \n\n\n  useEffect(() => {\n    setAllData().then((data => setCalculatedData(data)))\n\n  }, [])\n\n\n  const [totalTitles, setTotalTitles] = useState({ confirmed: \"Confirmed\", deaths: \"Deaths\", recovered: \"Recovered\"})\n\n  useEffect(() => {\n    if (calculatedData[country]) {\n      \n      setCountryData(calculatedData[country]);\n      \n      setTotalTitles({ \n        confirmed: `Confirmed: ${calculatedData[\"world\"].confirmed.statistics[country].total}`,\n        deaths: `Deaths: ${calculatedData[\"world\"].deaths.statistics[country].total}`,\n        recovered: `Recovered: ${calculatedData[\"world\"].recovered.statistics[country].total}`\n      });\n      \n    }\n  }, [calculatedData, country])\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-bar\" >\n        <ul>\n          <li onClick={() => setDataType(\"confirmed\")} className=\"confirmed\">{totalTitles.confirmed}</li>\n          <li onClick={() => setDataType(\"deaths\")} className=\"deaths\">{totalTitles.deaths}</li>\n          <li onClick={() => setDataType(\"recovered\")} className=\"recovered\">{totalTitles.recovered}</li>\n        </ul>\n      </div>\n      <div className=\"map-and-charts\">\n        <Map setCountry={setCountry} country={country} data={calculatedData} dataType={dataType}/>\n        <div className=\"charts\" style = {{ width: \"50%\", float: \"right\"}}>\n          <TotalChart data={countryData}/> \n          <DailyChart data={countryData} dataType={dataType}/> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}