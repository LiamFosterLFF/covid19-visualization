{"version":3,"sources":["components/Statistics.js","topojsons/all-jsons.js","countryNameDictionary.js","components/Map/index.js","components/Charts/TotalChart.js","components/Charts/DailyChart.js","components/Charts/index.js","App.js","index.js"],"names":["Statistics","handleClick","data","useState","statistics","setStatistics","useEffect","stats","Object","entries","forEach","provinceData","dataType","dataSet","Number","parseInt","slice","hoveredStat","setHoveredStat","textColors","Grid","columns","divided","Column","map","index","statName","statValue","statNameCapitalized","charAt","toUpperCase","statValueWithCommas","toString","replace","key","width","className","onClick","onMouseEnter","e","target","split","handleHover","onMouseLeave","style","componentJsonDictionary","world","worldLowRes","ao","ar","am","au","at","az","bd","by","be","bt","bo","ba","bw","br","bn","bg","bf","bi","kh","cm","ca","cf","td","cl","cn","co","cd","cg","cr","hr","cu","cy","cz","dk","dj","ec","eg","sv","ee","et","fi","fr","ge","de","gr","gt","gn","ht","hn","hu","is","id","ir","iq","ie","il","it","jm","jp","kz","ke","xk","kg","la","lv","lt","lu","mk","my","ml","mx","md","me","ma","mm","np","nl","nz","ni","ng","no","om","pk","ps","pa","py","ph","pl","pt","qa","ro","ru","rw","sa","rs","sl","sk","si","za","kr","es","lk","se","ch","sy","tw","tj","th","tr","ug","ua","ae","gb","uy","us","uz","ve","vn","ye","countryNameDictionary","MapStyling","styled","div","props","colors","provinces","default","Map","mapStats","setMapStats","provinceColors","setProvinceColors","setMap","tooltipOpen","setTooltipOpen","tooltipText","setToolTipText","tooltipRef","useRef","calculateMapStats","countryData","provinceStats","provinceName","confirmed","length","mostRecentTotal","tenDaysAgoTotal","numberOfNewInfections","rateOfChange","toLowerCase","tenDaysNewInfections","tooltipMapStat","mapColorStat","getProcessedUSData","a","getUSData","d3","rawData","processUSData","USData","processedData","localDataSet","stateName","localData","filter","isNaN","dataPoint","newTotal","then","country","nationwideData","i","push","keys","newProvinceColors","countryIdDictionary","value","rainbow","Rainbow","setSpectrum","defaultColor","includes","colourAt","Math","floor","provinceStat","provinceId","undefined","hue","capitalizeCountry","word","join","Header","as","textAlign","Button","setCountry","layerProps","attributes","hoveredCountry","name","province","formatNumbers","number","Popup","Content","toFixed","createTooltipContent","current","basic","context","position","onClose","open","TotalChart","setDate","lineData","setLineData","ld","date","total","CustomTooltip","active","payload","label","background","capitalizedCountry","height","activePayload","strokeDasharray","content","verticalAlign","dataKey","tickFormatter","tick","offset","angle","type","stroke","fill","DailyChart","chartData","setChartData","dailyIncrease","increase","calculateDailyIncrease","yAxisDict","barSize","Charts","resetDate","graphArrays","setGraphArrays","createGraphArrays","maxHeight","presentDateObj","Date","day","getDate","month","getMonth","year","getFullYear","getFormattedDate","App","isFetching","setData","setDataType","original","timeLimited","setCountryData","dateLimit","setDateLimit","getSingularDataType","isSameDate","dateObj1","dateObj2","caches","cache","url","match","cachedData","dataDate","localStorage","getItem","fetch","response","text","csvString","put","Response","JSON","stringify","setItem","json","returnObj","Promise","all","dataTypes","getData","createCountryTimeSeries","sortedTimeSeriesArrays","subprovinceName","provinceText","sort","b","aArr","bArr","checkingOrder","c","aVal","bVal","originalCountryData","obj","getCountryData","newCountryData","dateLimitObj","currentData","stackable","ReactDOM","render","document","getElementById"],"mappings":"4rp2RAmDeA,EAhDI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAAW,EAEJC,mBAAS,CAAC,UAAa,EAAG,UAAa,EAAG,OAAU,IAFhD,mBAElCC,EAFkC,KAEtBC,EAFsB,KAG1CC,qBAAU,WACN,IAAMC,EAAQ,CAAC,UAAa,EAAG,UAAa,EAAG,OAAU,GAEzDC,OAAOC,QAAQP,GAAMQ,SAAQ,YAAuB,IAAnBC,EAAkB,oBAC/CH,OAAOC,QAAQE,GAAcD,SAAQ,YAA0B,IAAD,mBAAvBE,EAAuB,KAAbC,EAAa,KAE1DN,EAAMK,IAAaE,OAAOC,SAASF,EAAQG,OAAO,GAAG,GAAG,UAGhEX,EAAcE,KACf,CAACL,IAbsC,MAeFC,mBAAS,IAfP,mBAelCc,EAfkC,KAerBC,EAfqB,KAoBpCC,EAAa,CAAC,UAAa,UAAW,UAAa,UAAW,OAAU,WAE9E,OACI,kBAACC,EAAA,EAAD,CAAMC,QAAQ,IAAIC,SAAO,GACrB,kBAACF,EAAA,EAAKG,OAAN,MACCf,OAAOC,QAAQL,GAAYoB,KAAI,WAAwBC,GAAW,IAAD,mBAAhCC,EAAgC,KAAtBC,EAAsB,KACpDC,EAAsBF,EAASG,OAAO,GAAGC,cAAgBJ,EAASV,MAAM,GACxEe,EAAsBJ,EAAUK,WAAWC,QAAQ,wBAAyB,KAClF,OACI,kBAACb,EAAA,EAAKG,OAAN,CACIW,IAAKT,EACLU,MAAO,EACPC,UAAWV,EACXW,QAAS,kBAAMpC,EAAYyB,IAC3BY,aAAc,SAACC,GAAD,OAlBlB,SAACA,GACjBrB,EAAeqB,EAAEC,OAAOJ,UAAUK,MAAM,KAAKzB,OAAO,GAAG,IAiBd0B,CAAYH,IACjCI,aAAc,kBAAMzB,EAAe,KACnC0B,MAAO,CAAC,SAAa3B,IAAgBS,EAAY,QAAS,SAAU,OAAU,UAAW,UAAa,SAAU,MAASP,EAAWO,KAPxI,UASQE,EATR,aASgCG,OAK5C,kBAACX,EAAA,EAAKG,OAAN,Q,SCyRIsB,EA7HgB,CACxtDOC,EA/Qe,CAC1B,GAAO,cACP,GAAO,UACP,GAAO,UACP,GAAO,SACP,GAAO,YACP,GAAO,UACP,GAAO,YACP,GAAO,UACP,GAAO,aACP,GAAO,aACP,GAAO,UACP,GAAO,UACP,GAAO,SACP,GAAO,QACP,GAAO,SACP,GAAO,UACP,GAAO,yBACP,GAAO,WACP,GAAO,SACP,GAAO,oBACP,GAAO,WACP,GAAO,eACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,SACP,GAAO,2BACP,GAAO,OACP,GAAO,QACP,GAAO,QACP,GAAO,WACP,GAAO,mBACP,GAAO,sBACP,GAAO,aACP,GAAO,gBACP,GAAO,UACP,GAAO,OACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,WACP,GAAO,qBACP,GAAO,UACP,GAAO,oBACP,GAAO,QACP,GAAO,cACP,GAAO,UACP,GAAO,UACP,GAAO,WACP,GAAO,WACP,GAAO,UACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,wBACP,GAAO,UACP,GAAO,QACP,GAAO,SACP,GAAO,qBACP,GAAO,YACP,GAAO,SACP,GAAO,gBACP,GAAO,SACP,GAAO,QACP,GAAO,WACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,OACP,GAAO,OACP,GAAO,UACP,GAAO,SACP,GAAO,QACP,GAAO,UACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,QACP,GAAO,SACP,GAAO,aACP,GAAO,OACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,aACP,GAAO,kBACP,GAAO,SACP,GAAO,WACP,GAAO,OACP,GAAO,UACP,GAAO,UACP,GAAO,aACP,GAAO,aACP,GAAO,aACP,GAAO,aACP,GAAO,QACP,GAAO,WACP,GAAO,SACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,cACP,GAAO,YACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,OACP,GAAO,WACP,GAAO,YACP,GAAO,SACP,GAAO,OACP,GAAO,mBACP,GAAO,WACP,GAAO,cACP,GAAO,SACP,GAAO,WACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,SACP,GAAO,eACP,GAAO,UACP,GAAO,SACP,GAAO,eACP,GAAO,WACP,GAAO,WACP,GAAO,UACP,GAAO,eACP,GAAO,eACP,GAAO,QACP,GAAO,YACP,GAAO,SACP,GAAO,QACP,GAAO,cACP,GAAO,WACP,GAAO,cACP,GAAO,QACP,GAAO,aACP,GAAO,WACP,GAAO,OACP,GAAO,UACP,GAAO,eACP,GAAO,WACP,GAAO,SACP,GAAO,UACP,GAAO,SACP,GAAO,UACP,GAAO,uBACP,GAAO,iBACP,GAAO,UACP,GAAO,gBACP,GAAO,aACP,GAAO,YACP,GAAO,UACP,GAAO,iBACP,GAAO,QACP,GAAO,SACP,GAAO,WAGP,SAAU,6BACV,SAAU,wBACV,QAAS,gCACT,QAAS,6BACT,QAAS,+BACT,SAAU,sBACV,SAAU,sBACV,SAAU,0CAEV,QAAS,eACT,QAAS,iBACT,QAAS,mBACT,QAAS,gBACT,QAAS,mBACT,QAAS,eACT,QAAS,iBACT,QAAS,iBACT,QAAS,gBACT,QAAS,eACT,QAAS,eACT,QAAS,mBACT,QAAS,sBACT,QAAS,eACT,QAAS,eACT,QAAS,eACT,QAAS,iBACT,QAAS,iBACT,QAAS,kBACT,QAAS,eACT,QAAS,wBACT,QAAS,iBACT,QAAS,iBACT,QAAS,iBACT,QAAS,iBACT,QAAS,kBACT,QAAS,kBACT,QAAS,gBACT,QAAS,iBACT,QAAS,gBACT,QAAS,kBACT,QAAS,eACT,QAAS,kBAET,QAAS,kBACT,QAAS,2BACT,QAAS,mBACT,QAAS,wBACT,QAAS,oCACT,QAAS,sBACT,QAAS,gCACT,QAAS,kBACT,QAAS,kBACT,QAAS,+BACT,QAAS,iBACT,QAAS,uBACT,QAAS,gBAET,QAAS,yBACT,QAAS,yBACT,QAAS,0BACT,QAAS,4BACT,QAAS,0BACT,QAAS,6BACT,QAAS,0BACT,QAAS,yBACT,QAAS,yBACT,QAAS,sBACT,QAAS,uBACT,QAAS,0BACT,QAAS,yBACT,QAAS,wBACT,QAAS,0BACT,QAAS,2BACT,QAAS,+BACT,QAAS,0BACT,QAAS,uBACT,QAAS,0BACT,QAAS,2BACT,QAAS,0BACT,QAAS,6BACT,QAAS,yBACT,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","file":"static/js/main.b1a90909.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nconst Statistics = ({ handleClick, data }) => {\n\n    const [ statistics, setStatistics ] = useState({\"confirmed\": 0, \"recovered\": 0, \"deaths\": 0});\n    useEffect(() => {\n        const stats = {\"confirmed\": 0, \"recovered\": 0, \"deaths\": 0}\n        // Find the most recent value for each province and add to totals for relevant dataset type\n        Object.entries(data).forEach(([, provinceData]) => {\n            Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n                // dataSet is of form [[date, total(str)]], so take last total of each and add it\n                stats[dataType] += Number.parseInt(dataSet.slice(-1)[0][1]);\n            })\n        })\n        setStatistics(stats)\n    }, [data])\n\n    const [ hoveredStat, setHoveredStat ] = useState(\"\")\n    const handleHover = (e) => {\n        setHoveredStat(e.target.className.split(\" \").slice(-1)[0]);\n    }\n\n    const textColors = {\"confirmed\": \"#8884d8\", \"recovered\": \"#54ed40\", \"deaths\": \"#f72e2e\"}\n\n    return (\n        <Grid columns=\"5\" divided>\n            <Grid.Column/>\n            {Object.entries(statistics).map(([statName, statValue], index) => {\n                    const statNameCapitalized = statName.charAt(0).toUpperCase() + statName.slice(1);\n                    const statValueWithCommas = statValue.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                    return (\n                        <Grid.Column \n                            key={index}\n                            width={3} \n                            className={statName}\n                            onClick={() => handleClick(statName)} \n                            onMouseEnter={(e) => handleHover(e)}\n                            onMouseLeave={() => setHoveredStat(\"\")}\n                            style={{\"fontSize\": (hoveredStat === statName) ? \"large\": \"medium\", \"cursor\": \"pointer\", \"textAlign\": \"center\", \"color\": textColors[statName]}}\n                        >\n                            {`${statNameCapitalized}: ${statValueWithCommas}`}\n                        </Grid.Column>\n\n                    )\n                })}\n            <Grid.Column/>\n        </Grid>\n    )\n}\n\nexport default Statistics;","import world from '../topojsons/world.json';\nimport worldLowRes from '../topojsons/world-low-res.json';\n\nimport ao from '../topojsons/angola.json';\nimport ar from '../topojsons/argentina.json';\nimport am from '../topojsons/armenia.json';\nimport au from '../topojsons/australia.json';\nimport at from '../topojsons/austria.json';\nimport az from '../topojsons/azerbaijan.json';\nimport bd from '../topojsons/bangladesh.json';\nimport by from '../topojsons/belarus.json';\nimport be from '../topojsons/belgium.json';\nimport bt from '../topojsons/bhutan.json';\nimport bo from '../topojsons/bolivia.json';\nimport ba from '../topojsons/bosnia-herzegovina.json';\nimport bw from '../topojsons/botswana.json';\nimport br from '../topojsons/brazil.json';\nimport bn from '../topojsons/brunei-darussalam.json';\nimport bg from '../topojsons/bulgaria.json';\nimport bf from '../topojsons/burkina-faso.json';\nimport bi from '../topojsons/burundi.json';\nimport kh from '../topojsons/cambodia.json';\nimport cm from '../topojsons/cameroon.json';\nimport ca from '../topojsons/canada.json';\nimport cf from '../topojsons/central-african-republic.json';\nimport td from '../topojsons/chad.json';\nimport cl from '../topojsons/chile.json';\nimport cn from '../topojsons/china.json';\nimport co from '../topojsons/colombia.json';\nimport cd from '../topojsons/congo-dr.json';\nimport cg from '../topojsons/congo.json';\nimport cr from '../topojsons/costa-rica.json';\nimport hr from '../topojsons/croatia.json';\nimport cu from '../topojsons/cuba.json';\nimport cy from '../topojsons/cyprus.json';\nimport cz from '../topojsons/czech-republic.json';\nimport dk from '../topojsons/denmark.json';\nimport dj from '../topojsons/djibouti.json';\nimport dom from '../topojsons/dominican-republic.json';\nimport ec from '../topojsons/ecuador.json';\nimport eg from '../topojsons/egypt.json';\nimport sv from '../topojsons/el-salvador.json';\nimport ee from '../topojsons/estonia.json';\nimport et from '../topojsons/ethiopia.json';\nimport fi from '../topojsons/finland.json';\nimport fr from '../topojsons/france.json';\nimport ge from '../topojsons/georgia.json';\nimport de from '../topojsons/germany.json';\nimport gr from '../topojsons/greece.json';\nimport gt from '../topojsons/guatemala.json';\nimport gn from '../topojsons/guinea.json';\nimport ht from '../topojsons/haiti.json';\nimport hn from '../topojsons/honduras.json';\nimport hu from '../topojsons/hungary.json';\nimport is from '../topojsons/iceland.json';\nimport ind from '../topojsons/india.json';\nimport id from '../topojsons/indonesia.json';\nimport ir from '../topojsons/iran.json';\nimport iq from '../topojsons/iraq.json';\nimport ie from '../topojsons/ireland.json';\nimport il from '../topojsons/israel.json';\nimport it from '../topojsons/italy.json';\nimport jm from '../topojsons/jamaica.json';\nimport jp from '../topojsons/japan.json';\nimport kz from '../topojsons/kazakhstan.json';\nimport ke from '../topojsons/kenya.json';\nimport xk from '../topojsons/kosovo.json';\nimport kg from '../topojsons/kyrgyzstan.json';\nimport la from '../topojsons/laos.json';\nimport lv from '../topojsons/latvia.json';\nimport lt from '../topojsons/lithuania.json';\nimport lu from '../topojsons/luxembourg.json';\nimport mk from '../topojsons/macedonia.json';\nimport my from '../topojsons/malaysia.json';\nimport ml from '../topojsons/mali.json';\nimport mx from '../topojsons/mexico.json';\nimport md from '../topojsons/moldova.json';\nimport me from '../topojsons/montenegro.json';\nimport ma from '../topojsons/morocco.json';\nimport mm from '../topojsons/myanmar.json';\nimport np from '../topojsons/nepal.json';\nimport nl from '../topojsons/netherlands.json';\nimport nz from '../topojsons/new-zealand-2.json';\nimport ni from '../topojsons/nicaragua.json';\nimport ng from '../topojsons/nigeria.json';\nimport no from '../topojsons/norway.json';\nimport om from '../topojsons/oman.json';\nimport pk from '../topojsons/pakistan.json';\nimport ps from '../topojsons/palestine.json';\nimport pa from '../topojsons/panama.json';\nimport py from '../topojsons/paraguay.json';\nimport ph from '../topojsons/philippines.json';\nimport pl from '../topojsons/poland.json';\nimport pt from '../topojsons/portugal.json';\nimport qa from '../topojsons/qatar.json';\nimport ro from '../topojsons/romania.json';\nimport ru from '../topojsons/russia.json';\nimport rw from '../topojsons/rwanda.json';\nimport sa from '../topojsons/saudi-arabia.json';\nimport rs from '../topojsons/serbia.json';\nimport sl from '../topojsons/sierra-leone.json';\nimport sk from '../topojsons/slovakia.json';\nimport si from '../topojsons/slovenia.json';\nimport za from '../topojsons/south-africa.json';\nimport kr from '../topojsons/south-korea.json';\nimport es from '../topojsons/spain.json';\nimport lk from '../topojsons/sri-lanka.json';\nimport se from '../topojsons/sweden.json';\nimport ch from '../topojsons/switzerland.json';\nimport sy from '../topojsons/syria.json';\nimport tw from '../topojsons/taiwan.json';\nimport tj from '../topojsons/tajikistan.json';\nimport th from '../topojsons/thailand.json';\nimport tr from '../topojsons/turkey.json';\nimport ug from '../topojsons/uganda.json';\nimport ua from '../topojsons/ukraine.json';\nimport ae from '../topojsons/united-arab-emirates.json';\nimport gb from '../topojsons/united-kingdom.json';\nimport uy from '../topojsons/uruguay.json';\nimport us from '../topojsons/usa.json';\nimport uz from '../topojsons/uzbekistan.json';\nimport ve from '../topojsons/venezuela.json';\nimport vn from '../topojsons/vietnam.json';\nimport ye from '../topojsons/yemen.json';\n\n// import xy from '../topojsons/andorra.json';\n// import bh from '../topojsons/bahamas.json';\n// import xy from '../topojsons/bahrain.json';\n// import ba from '../topojsons/bosnia-herzegovina-2.json';\n// import xy from '../topojsons/cape-verde.json';\n// import cl from '../topojsons/chile-2.json';\n// import xy from '../topojsons/empty.json';\n// import xy from '../topojsons/faroeIslands.json';\n// import xy from '../topojsons/france-departments.json';\n// import xy from '../topojsons/france-new.json';\n// import xy from '../topojsons/hong-kong.json';\n// import xy from '../topojsons/liechtenstein.json';\n// import xy from '../topojsons/malta.json';\n// import xy from '../topojsons/new-zealand.json';\n// import xy from '../topojsons/portugal-regions.json';\n// import xy from '../topojsons/san-marino.json';\n// import xy from '../topojsons/serbia-without-kosovo.json';\n// import xy from '../topojsons/singapore.json';\n// import xy from '../topojsons/south-africa-2.json';\n// import xy from '../topojsons/spain-provinces.json';\n// import gb from '../topojsons/united-kingdom-counties.json';\n// import xy from '../topojsons/usa-not-calibrated.json';\n// import us from '../topojsons/usa-with-AK-HI.json';\n// import xy from '../topojsons/vietnam-with-islands.json';\n\n// import xy from '../topojsons/usa-ak.json';\n// import xy from '../topojsons/usa-al.json';\n// import xy from '../topojsons/usa-ar.json';\n// import xy from '../topojsons/usa-az.json';\n// import xy from '../topojsons/usa-ca.json';\n// import xy from '../topojsons/usa-co.json';\n// import xy from '../topojsons/usa-ct.json';\n// import xy from '../topojsons/usa-de.json';\n// import xy from '../topojsons/usa-fl.json';\n// import xy from '../topojsons/usa-ga.json';\n// import xy from '../topojsons/usa-hi.json';\n// import xy from '../topojsons/usa-ia.json';\n// import xy from '../topojsons/usa-id.json';\n// import xy from '../topojsons/usa-il.json';\n// import xy from '../topojsons/usa-in.json';\n// import xy from '../topojsons/usa-ks.json';\n// import xy from '../topojsons/usa-ky.json';\n// import xy from '../topojsons/usa-la.json';\n// import xy from '../topojsons/usa-ma.json';\n// import xy from '../topojsons/usa-md.json';\n// import xy from '../topojsons/usa-me.json';\n// import xy from '../topojsons/usa-mi.json';\n// import xy from '../topojsons/usa-mn.json';\n// import xy from '../topojsons/usa-mo.json';\n// import xy from '../topojsons/usa-ms.json';\n// import xy from '../topojsons/usa-mt.json';\n// import xy from '../topojsons/usa-nc.json';\n// import xy from '../topojsons/usa-nd.json';\n// import xy from '../topojsons/usa-ne.json';\n// import xy from '../topojsons/usa-nh.json';\n// import xy from '../topojsons/usa-nj.json';\n// import xy from '../topojsons/usa-nm.json';\n// import xy from '../topojsons/usa-nv.json';\n// import xy from '../topojsons/usa-ny.json';\n// import xy from '../topojsons/usa-oh.json';\n// import xy from '../topojsons/usa-ok.json';\n// import xy from '../topojsons/usa-or.json';\n// import xy from '../topojsons/usa-pa.json';\n// import xy from '../topojsons/usa-ri.json';\n// import xy from '../topojsons/usa-sc.json';\n// import xy from '../topojsons/usa-sd.json';\n// import xy from '../topojsons/usa-tn.json';\n// import xy from '../topojsons/usa-tx.json';\n// import xy from '../topojsons/usa-ut.json';\n// import xy from '../topojsons/usa-va.json';\n// import xy from '../topojsons/usa-vt.json';\n// import xy from '../topojsons/usa-wa.json';\n// import xy from '../topojsons/usa-wdc.json';\n// import xy from '../topojsons/usa-wi.json';\n// import xy from '../topojsons/usa-wv.json';\n// import xy from '../topojsons/usa-wy.json';\n\nconst componentJsonDictionary = {\n        world,\n        worldLowRes,\n        ao,\n        ar,\n        am,\n        au,\n        at,\n        az,\n        bd,\n        by,\n        be,\n        bt,\n        bo,\n        ba,\n        bw,\n        br,\n        bn,\n        bg,\n        bf,\n        bi,\n        kh,\n        cm,\n        ca,\n        cf,\n        td,\n        cl,\n        cn,\n        co,\n        cd,\n        cg,\n        cr,\n        hr,\n        cu,\n        cy,\n        cz,\n        dk,\n        dj,\n        \"do\": dom,\n        ec,\n        eg,\n        sv,\n        ee,\n        et,\n        fi,\n        fr,\n        ge,\n        de,\n        gr,\n        gt,\n        gn,\n        ht,\n        hn,\n        hu,\n        is,\n        \"in\": ind,\n        id,\n        ir,\n        iq,\n        ie,\n        il,\n        it,\n        jm,\n        jp,\n        kz,\n        ke,\n        xk,\n        kg,\n        la,\n        lv,\n        lt,\n        lu,\n        mk,\n        my,\n        ml,\n        mx,\n        md,\n        me,\n        ma,\n        mm,\n        np,\n        nl,\n        nz,\n        ni,\n        ng,\n        no,\n        om,\n        pk,\n        ps,\n        pa,\n        py,\n        ph,\n        pl,\n        pt,\n        qa,\n        ro,\n        ru,\n        rw,\n        sa,\n        rs,\n        sl,\n        sk,\n        si,\n        za,\n        kr,\n        es,\n        lk,\n        se,\n        ch,\n        sy,\n        tw,\n        tj,\n        th,\n        tr,\n        ug,\n        ua,\n        ae,\n        gb,\n        uy,\n        us,\n        uz,\n        ve,\n        vn,\n        ye\n    }\nexport default  componentJsonDictionary \n// \n// \n// ","const countryNameDictionary = {\n    \"af\" : \"afghanistan\",\n    \"al\" : \"albania\",\n    \"dz\" : \"algeria\",\n    \"ao\" : \"angola\",\n    \"ar\" : \"argentina\",\n    \"am\" : \"armenia\",\n    \"au\" : \"australia\",\n    \"at\" : \"austria\",\n    \"az\" : \"azerbaijan\",\n    \"bd\" : \"bangladesh\",\n    \"by\" : \"belarus\",\n    \"be\" : \"belgium\",\n    \"bz\" : \"belize\",\n    \"bj\" : \"benin\",\n    \"bt\" : \"bhutan\",\n    \"bo\" : \"bolivia\",\n    \"ba\" : \"bosnia and herzegovina\",\n    \"bw\" : \"botswana\",\n    \"br\" : \"brazil\",\n    \"bn\" : \"brunei darussalam\",\n    \"bg\" : \"bulgaria\",\n    \"bf\" : \"burkina faso\",\n    \"bi\" : \"burundi\",\n    \"kh\" : \"cambodia\",\n    \"cm\" : \"cameroon\",\n    \"ca\" : \"canada\",\n    \"cf\" : \"central african republic\",\n    \"td\" : \"chad\",\n    \"cl\" : \"chile\",\n    \"cn\" : \"china\",\n    \"co\" : \"colombia\",\n    \"cd\" : \"congo (kinshasa)\",\n    \"cg\" : \"congo (brazzaville)\",\n    \"cr\" : \"costa rica\",\n    \"ci\" : \"cote d'ivoire\",\n    \"hr\" : \"croatia\",\n    \"cu\" : \"cuba\",\n    \"cy\" : \"cyprus\",\n    \"cz\" : \"czechia\",\n    \"dk\" : \"denmark\",\n    \"dj\" : \"djibouti\",\n    \"do\" : \"dominican republic\",\n    \"ec\" : \"ecuador\",\n    \"gq\" : \"equatorial guinea\",\n    \"eg\" : \"egypt\",\n    \"sv\" : \"el salvador\",\n    \"er\" : \"eritrea\",\n    \"ee\" : \"estonia\",\n    \"sz\" : \"eswatini\",\n    \"et\" : \"ethiopia\",\n    \"fi\" : \"finland\",\n    \"fr\" : \"france\",\n    \"ga\" : \"gabon\",\n    \"ge\" : \"georgia\",\n    \"gf\" : \"france, french guiana\",\n    \"de\" : \"germany\",\n    \"gh\" : \"ghana\",\n    \"gr\" : \"greece\",\n    \"gl\" : \"denmark, greenland\",\n    \"gt\" : \"guatemala\",\n    \"gn\" : \"guinea\",\n    \"gw\" : \"guinea-bissau\",\n    \"gy\" : \"guyana\",\n    \"ht\" : \"haiti\",\n    \"hn\" : \"honduras\",\n    \"hu\" : \"hungary\",\n    \"is\" : \"iceland\",\n    \"in\" : \"india\",\n    \"id\" : \"indonesia\",\n    \"ir\" : \"iran\",\n    \"iq\" : \"iraq\",\n    \"ie\" : \"ireland\",\n    \"il\" : \"israel\",\n    \"it\" : \"italy\",\n    \"jm\" : \"jamaica\",\n    \"jp\" : \"japan\",\n    \"jo\" : \"jordan\",\n    \"kz\" : \"kazakhstan\",\n    \"ke\" : \"kenya\",\n    \"xk\" : \"kosovo\",\n    \"kg\" : \"kyrgyzstan\",\n    \"la\" : \"laos\",\n    \"lv\" : \"latvia\",\n    \"ls\" : \"lesotho\",\n    \"lr\" : \"liberia\",\n    \"ly\" : \"libya\",\n    \"lt\" : \"lithuania\",\n    \"lu\" : \"luxembourg\",\n    \"mk\" : \"north macedonia\",\n    \"mw\" : \"malawi\",\n    \"my\" : \"malaysia\",\n    \"ml\" : \"mali\",\n    \"ma\" : \"morocco\",\n    \"md\" : \"moldova\",\n    \"me\" : \"montenegro\",\n    \"mg\" : \"madagascar\",\n    \"mr\" : \"mauritania\",\n    \"mz\" : \"mozambique\",\n    \"mm\" : \"burma\",\n    \"mn\" : \"mongolia\",\n    \"mx\" : \"mexico\",\n    \"na\" : \"namibia\",\n    \"np\" : \"nepal\",\n    \"nl\" : \"netherlands\",\n    \"nz\" : \"new zealand\",\n    \"ni\" : \"nicaragua\",\n    \"ne\" : \"niger\",\n    \"ng\" : \"nigeria\",\n    \"no\" : \"norway\",\n    \"om\" : \"oman\",\n    \"pk\" : \"pakistan\",\n    \"ps\" : \"palestine\",\n    \"pa\" : \"panama\",\n    \"pe\" : \"peru\",\n    \"pg\" : \"papua new guinea\",\n    \"py\" : \"paraguay\",\n    \"ph\" : \"philippines\",\n    \"pl\" : \"poland\",\n    \"pt\" : \"portugal\",\n    \"qa\" : \"qatar\",\n    \"ro\" : \"romania\",\n    \"ru\" : \"russia\",\n    \"rw\" : \"rwanda\",\n    \"sa\" : \"saudi arabia\",\n    \"sn\" : \"senegal\",\n    \"rs\" : \"serbia\",\n    \"sl\" : \"sierra leone\",\n    \"sk\" : \"slovakia\",\n    \"si\" : \"slovenia\",\n    \"so\" : \"somalia\",\n    \"za\" : \"south africa\",\n    \"kr\" : \"korea, south\",\n    \"es\" : \"spain\",\n    \"lk\" : \"sri lanka\",\n    \"se\" : \"sweden\",\n    \"sd\" : \"sudan\",\n    \"ss\" : \"south sudan\",\n    \"sr\" : \"suriname\",\n    \"ch\" : \"switzerland\",\n    \"sy\" : \"syria\",\n    \"tj\" : \"tajikistan\",\n    \"tz\" : \"tanzania\",\n    \"tg\" : \"togo\",\n    \"tn\" : \"tunisia\",\n    \"tm\" : \"turkmenistan\",\n    \"th\" : \"thailand\",\n    \"tr\" : \"turkey\",\n    \"tw\" : \"taiwan*\",\n    \"ug\" : \"uganda\",\n    \"ua\" : \"ukraine\",\n    \"ae\" : \"united arab emirates\",\n    \"gb\" : \"united kingdom\",\n    \"uy\" : \"uruguay\",\n    \"us\" : \"united states\",\n    \"uz\" : \"uzbekistan\",\n    \"ve\" : \"venezuela\",\n    \"vn\" : \"vietnam\",\n    \"eh\" : \"western sahara\",\n    \"ye\" : \"yemen\",\n    \"zm\" : \"zambia\",\n    \"zw\" : \"zimbabwe\",\n    // Provinces\n    // Australia\n    \"au-nsw\": \"australia, new south wales\",\n    \"au-qld\": \"australia, queensland\",\n    \"au-nt\": \"australia, northern territory\",\n    \"au-sa\": \"australia, south australia\",\n    \"au-wa\": \"australia, western australia\",\n    \"au-tas\": \"australia, tasmania\",\n    \"au-vic\": \"australia, victoria\",\n    \"au-act\": \"australia, australian capital territory\",\n    //China\n    \"cn-34\": \"china, anhui\",\n    \"cn-11\": \"china, beijing\",\n    \"cn-50\": \"china, chongqing\",\n    \"cn-35\": \"china, fujian\",\n    \"cn-44\": \"china, guangdong\",\n    \"cn-62\": \"china, gansu\",\n    \"cn-45\": \"china, guangxi\",\n    \"cn-52\": \"china, guizhou\",\n    \"cn-46\": \"china, hainan\",\n    \"cn-13\": \"china, hebei\",\n    \"cn-41\": \"china, henan\",\n    \"cn-91\": \"china, hong kong\",\n    \"cn-23\": \"china, heilongjiang\",\n    \"cn-43\": \"china, hunan\",\n    \"cn-42\": \"china, hubei\",\n    \"cn-22\": \"china, jilin\",\n    \"cn-32\": \"china, jiangsu\",\n    \"cn-36\": \"china, jiangxi\",\n    \"cn-21\": \"china, liaoning\",\n    \"cn-92\": \"china, macau\",\n    \"cn-15\": \"china, inner mongolia\",\n    \"cn-64\": \"china, ningxia\",\n    \"cn-63\": \"china, qinghai\",\n    \"cn-61\": \"china, shaanxi\",\n    \"cn-51\": \"china, sichuan\",\n    \"cn-37\": \"china, shandong\",\n    \"cn-31\": \"china, shanghai\",\n    \"cn-14\": \"china, shanxi\",\n    \"cn-12\": \"china, tianjin\",\n    \"cn-53\": \"china, yunnan\",\n    \"cn-33\": \"china, zhejiang\",\n    \"cn-54\": \"china, tibet\",\n    \"cn-65\": \"china, xinjiang\",\n    // Canada\n    \"ca-ab\": \"canada, alberta\",\n    \"ca-bc\": \"canada, british columbia\",\n    \"ca-mb\": \"canada, manitoba\",\n    \"ca-nb\": \"canada, new brunswick\",\n    \"ca-nl\": \"canada, newfoundland and labrador\",\n    \"ca-ns\": \"canada, nova scotia\",\n    \"ca-nt\": \"canada, northwest territories\",\n    \"ca-nu\": \"canada, nunavut\",\n    \"ca-on\": \"canada, ontario\",\n    \"ca-pe\": \"canada, prince edward island\",\n    \"ca-qc\": \"canada, quebec\",\n    \"ca-sk\": \"canada, saskatchewan\",\n    \"ca-yt\": \"canada, yukon\",\n    // US\n    \"us-al\": \"united states, alabama\",\n    \"us-az\": \"united states, arizona\",\n    \"us-ar\": \"united states, arkansas\",\n    \"us-ca\": \"united states, california\",\n    \"us-co\": \"united states, colorado\",\n    \"us-ct\": \"united states, connecticut\",\n    \"us-de\": \"united states, delaware\",\n    \"us-fl\": \"united states, florida\",\n    \"us-ga\": \"united states, georgia\",\n    \"us-ia\": \"united states, iowa\",\n    \"us-id\": \"united states, idaho\",\n    \"us-il\": \"united states, illinois\",\n    \"us-in\": \"united states, indiana\",\n    \"us-ks\": \"united states, kansas\",\n    \"us-ky\": \"united states, kentucky\",\n    \"us-la\": \"united states, louisiana\",\n    \"us-ma\": \"united states, massachusetts\",\n    \"us-md\": \"united states, maryland\",\n    \"us-me\": \"united states, maine\",\n    \"us-mi\": \"united states, michigan\",\n    \"us-mn\": \"united states, minnesota\",\n    \"us-mo\": \"united states, missouri\",\n    \"us-ms\": \"united states, mississippi\",\n    \"us-mt\": \"united states, montana\",\n    \"us-nc\": \"united states, north carolina\",\n    \"us-nd\": \"united states, north dakota\",\n    \"us-ne\": \"united states, nebraska\",\n    \"us-nh\": \"united states, new hampshire\",\n    \"us-nj\": \"united states, new jersey\",\n    \"us-nm\": \"united states, new mexico\",\n    \"us-nv\": \"united states, nevada\",\n    \"us-ny\": \"united states, new york\",\n    \"us-oh\": \"united states, ohio\",\n    \"us-ok\": \"united states, oklahoma\",\n    \"us-or\": \"united states, oregon\",\n    \"us-pa\": \"united states, pennsylvania\",\n    \"us-ri\": \"united states, rhode island\",\n    \"us-sd\": \"united states, south dakota\",\n    \"us-sc\": \"united states, south carolina\",\n    \"us-tn\": \"united states, tennessee\",\n    \"us-tx\": \"united states, texas\",\n    \"us-ut\": \"united states, utah\",\n    \"us-va\": \"united states, virginia\",\n    \"us-vt\": \"united states, vermont\",\n    \"us-wa\": \"united states, washington\",\n    \"us-wi\": \"united states, wisconsin\",\n    \"us-wv\": \"united states, west virginia\",\n    \"us-wy\": \"united states, wyoming\",\n}\n\nexport default countryNameDictionary;","import React, { useState, useEffect, useRef } from 'react';\nimport componentJsonDictionary from '../../topojsons/all-jsons.js';\n\nimport styled from 'styled-components'\nimport { VectorMap } from '@south-paw/react-vector-maps';\nimport countryNameDictionary from '../../countryNameDictionary.js';\nimport Rainbow from 'rainbowvis.js';\nimport { Button, Grid, Popup, Header } from 'semantic-ui-react'\nimport * as d3 from 'd3';\n\nconst MapStyling = styled.div`\n    path {\n        ${props => props.colors.provinces}\n        &:hover {\n            opacity: 0.5;\n            cursor: pointer;\n        }\n    }\n    svg { \n        stroke: #fff;\n        fill: ${props => props.colors.default};\n        margin: 0% 5% ;\n    }\n`;\n\n\nconst Map = (props) => {\n\n    const [ mapStats, setMapStats ] = useState({})\n    const [ provinceColors, setProvinceColors ] = useState({ default: \"\", provinces: \"\" });\n    const [ map, setMap ] = useState(componentJsonDictionary[\"worldLowRes\"]);\n\n    const [ tooltipOpen, setTooltipOpen ] = useState(false)\n    const [ tooltipText, setToolTipText ] = useState(\"\")\n    const tooltipRef = useRef()\n\n    const calculateMapStats = (countryData) => {\n        const provinceStats = {};\n        Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n            if (provinceData.confirmed && provinceData.confirmed.length > 0) {\n                const mostRecentTotal = provinceData.confirmed.slice(-1)[0][1];\n                const tenDaysAgoTotal = provinceData.confirmed.slice(-10)[0][1];\n                const numberOfNewInfections = mostRecentTotal - tenDaysAgoTotal;\n                // Prevent divide by 0\n                const rateOfChange = (mostRecentTotal===\"0\") ? 0 : (numberOfNewInfections)/(mostRecentTotal);\n                // Different threshold depending on if provincial or national sum\n                const maxRedValue = 20000 \n                provinceStats[provinceName.toLowerCase()] = {\n                    mostRecentTotal,\n                    tenDaysAgoTotal,\n                    tenDaysNewInfections: numberOfNewInfections,\n                    rateOfChange,\n                    tooltipMapStat: rateOfChange * numberOfNewInfections,\n                    mapColorStat: (rateOfChange*numberOfNewInfections)/(maxRedValue/100)\n                }\n            }\n        })\n        return provinceStats;\n    }\n\n    const getProcessedUSData = async () => {\n        const getUSData = async () => {\n            const rawData = await d3.csv(`https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv`)\n            return rawData\n          }\n        \n        const processUSData = (USData) => {\n            // Need to clean the data a little bit, the dictionary keys don't match\n            const processedData = {}\n            USData.forEach((localDataSet) => {\n                const stateName = `united states, ${localDataSet[\"Province_State\"]}`;\n                const localData = Object.entries(localDataSet).filter(([key, entry]) => {\n                    return !isNaN(key[0]) \n                })\n                if (processedData[stateName]) {\n                    localData.forEach((dataPoint, index) => {\n                        const newTotal = Number.parseInt(processedData[stateName].confirmed[index][1]) + Number.parseInt(dataPoint[1]);\n                        processedData[stateName].confirmed[index][1] = newTotal;\n                    })\n                } else {\n                    processedData[stateName] = { confirmed: localData };\n                }\n            })\n            return processedData\n        }\n        let processedData;\n        await getUSData().then((data) => {\n            processedData = processUSData(data)\n        })\n        return processedData;\n\n    }\n\n    const preprocessProvincialData = (countryData) => {\n        // Three countries (aus, can, china) are special cases that do not have nationwide statistics - create these\n            const specialCaseCountries = [\"Australia\", \"China\", \"Canada\"];\n            specialCaseCountries.forEach((country) => {\n                const nationwideData = {\"confirmed\": [], \"recovered\": [], \"deaths\": []}\n                // Find all the provinces for that country\n                Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n                    if (provinceName.split(',')[0] === country) {\n                        // Cycle through datasets and combine them\n                        Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n                            for (let i = 0; i < dataSet.length; i++) {\n                                // Push in item from dataset if no point yet exists, else add totals together\n                                const dataPoint = nationwideData[dataType][i]\n                                if (dataPoint) {\n                                    const newTotal = Number.parseInt(nationwideData[dataType][i][1]) + Number.parseInt(dataSet[i][1]);\n                                    nationwideData[dataType][i][1] = newTotal;\n                                } else {\n                                    nationwideData[dataType].push(dataSet[i])\n                                }\n                            }\n                        })\n                    }\n                })\n                countryData[country] = nationwideData\n            })\n        return countryData\n    }\n\n    useEffect(() => {\n        if (Object.entries(props.data).length > 0) {\n            if (props.country === \"world\") {\n                setMapStats(calculateMapStats(preprocessProvincialData(props.data)))\n            } else if (props.country === \"united states\") {\n                // Handle US Data separately, it's a whole different chart and so is only fetched when called here\n                getProcessedUSData().then(rawData => {\n                    setMapStats(calculateMapStats(rawData))\n                })\n            } else {\n                setMapStats(calculateMapStats(props.data))\n            }\n        }\n    }, [props.data, props.country])\n\n    useEffect(() => {\n        if (Object.keys(mapStats).length !== 0) {\n            let newProvinceColors = \"\";\n\n            // Invert dictionary to make lookup dictionary (Easier to lookup by IDs vs country names, b/c capitalization)\n            const countryIdDictionary = {};\n            for (let [key, value] of Object.entries(countryNameDictionary)) {\n                countryIdDictionary[value] = key;\n            }\n\n            // Set a custom color gradient from 0=green to 100=red\n            const rainbow = new Rainbow();\n            rainbow.setSpectrum('#29e229', '#ddd623', '#e72a2a')\n            const defaultColorCountries = [\"world\", \"canada\", \"australia\", \"china\", \"united states\"]\n            const defaultColor = (defaultColorCountries.includes(props.country)) ? 'grey' : \"#\" + rainbow.colourAt(Math.floor(mapStats[props.country].mapColorStat))\n            Object.entries(mapStats).forEach(([provinceName, provinceStat]) => {\n                const provinceId = countryIdDictionary[provinceName.toLowerCase()];\n                if (provinceId !== undefined) { // Object is in dictionary (not a boat or small country etc)\n                    const hue = rainbow.colourAt(Math.floor(provinceStat.mapColorStat))\n                    newProvinceColors += `&[id=\"${provinceId}\"] {fill: #${hue}}`\n                }\n            })\n            setProvinceColors({ default: defaultColor, provinces: newProvinceColors })\n        }\n    }, [mapStats, props.country])\n\n    const onClick = ({ target }) => {\n        const id = target.attributes.id.value;\n        if (id in componentJsonDictionary) {\n            props.setCountry(countryNameDictionary[id])\n            setMap(componentJsonDictionary[id])\n        } else {\n            \n        }\n    }\n\n    const onMouseEnter = ({ target }) => {\n        const createTooltipContent = (country, province) => {\n            const formatNumbers = (number) => {\n                return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n            }\n            if (mapStats[province]) {\n                const { mostRecentTotal, tenDaysNewInfections, rateOfChange } = mapStats[province]\n                return (<>\n                    <Popup.Header>{capitalizeCountry(province)}</Popup.Header>\n                    <Popup.Content>\n                    <div>Most Recent Total {formatNumbers(mostRecentTotal)}</div>\n                    <div>Ten Days New Cases {formatNumbers(tenDaysNewInfections)}</div>\n                    <div>Rate of Change {rateOfChange.toFixed(2)}</div>\n                    {(country === \"world\") ? <div>Click Country for More Details</div> : \"\"}\n                    </Popup.Content>\n                </>)\n            } else {\n                return (<>\n                    <Popup.Header>{capitalizeCountry(province)}</Popup.Header>\n                    <Popup.Content>\n                    <div>No Data Available</div>\n                    </Popup.Content>\n                </>)\n            }\n        }\n        const hoveredCountry = target.attributes.name.value.toLowerCase()\n\n        setTooltipOpen(false)\n        setToolTipText(createTooltipContent(props.country, hoveredCountry));      \n        setTooltipOpen(true)\n        tooltipRef.current = target\n    }\n\n    const onMouseLeave = () => {\n        setTooltipOpen(false)\n    }\n    \n    const backClick = () => {\n        props.setCountry(\"world\")\n        setMap(componentJsonDictionary[\"worldLowRes\"])\n    }\n\n    const capitalizeCountry = (country) => country.split(' ').map(word => word[0].toUpperCase() + word.slice(1)).join(' ');\n\n\n\n    return (\n        <Grid.Column width={8}>\n            <MapStyling colors={provinceColors}>\n                <div>\n                    <Header as=\"h1\" textAlign=\"center\">{capitalizeCountry(props.country)}</Header>\n                    {(props.country === \"world\") ? <div></div> : <Button onClick={backClick}>World Map</Button>}\n                </div>\n                <VectorMap {...map} layerProps={{ onClick, onMouseEnter, onMouseLeave }}/>\n                <Popup basic context={tooltipRef} position='bottom center' onClose={() => setTooltipOpen(false)} open={tooltipOpen}>\n                    {tooltipText}\n                </Popup>\n            </MapStyling>\n\n        </Grid.Column>\n    )\n}\n\nexport default Map;","import React, { useState, useEffect } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid , Legend, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst TotalChart = ({ data, country, setDate }) => {\n\n  // Combine all three dataTypes into single items with all three values\n  const [ lineData, setLineData ] = useState([])\n  useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      const ld = []\n      for (let i = 0; i < data[\"confirmed\"].length; i++) {\n        ld.push({\n          \"date\": data[\"confirmed\"][i].date,\n          \"confirmed\": data[\"confirmed\"][i].total,\n          \"recovered\": data[\"recovered\"][i].total,\n          \"deaths\": data[\"deaths\"][i].total,\n        });\n      }\n      setLineData(ld)\n    }\n  }, [data])\n\n  const handleTickFormat = (number) => {\n    return (number/1000000).toString() + 'M';\n  }\n\n\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    const formatValue = (value) => {\n      return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\" style={{textAlign: \"center\", background: \"rgba(255, 255, 255, 0.75)\"}}>\n          <div className=\"label\">{`${label}`}</div>\n          {payload.map((dataPoint, index) => {\n            const dataType = dataPoint.name[0].toUpperCase() + dataPoint.name.slice(1);\n            return <div className={dataType} key={index}> {`${dataType}: ${formatValue(dataPoint.value)}`} </div>\n          })}\n          <div className=\"desc\">Click to set date back to {label}.</div>\n        </div>\n      );\n    }\n  \n    return null;\n  };\n\n\n  const capitalizedCountry = country[0].toUpperCase() + country.slice(1)\n\n  return (\n      <ResponsiveContainer height=\"50%\">\n        <AreaChart data={lineData} onClick={(e) => setDate(e.activePayload[0].payload.date)} style={{\"cursor\": \"pointer\"}}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip content={<CustomTooltip/>} />\n          <Legend verticalAlign=\"top\" height={36}/>\n          <XAxis dataKey=\"date\" />\n          <YAxis \n            tickFormatter={(tick) => handleTickFormat(tick)} \n            label={{ value: `Total Overall Cases (${capitalizedCountry})`, offset: 10, angle: -90, position: 'insideBottomLeft' }}\n          /> \n          <Area type=\"monotone\" dataKey=\"confirmed\" stroke=\"#8884d8\" fill=\"#8884d8\"/>\n          <Area type=\"monotone\" dataKey=\"deaths\" stroke=\"#f72e2e\" fill=\"#f72e2e\" />\n          <Area type=\"monotone\" dataKey=\"recovered\" stroke=\"#54ed40\" fill=\"#54ed40\" />\n        </AreaChart>\n      </ResponsiveContainer>\n  )\n}\n\nexport default TotalChart;","import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport XAxis from 'recharts/lib/cartesian/XAxis';\nimport YAxis from 'recharts/lib/cartesian/YAxis';\n\nconst DailyChart = ({ data, dataType, country, setDate }) => {\n  const [ chartData, setChartData ]  = useState([]);\n  const calculateDailyIncrease = (data) => {\n    const dailyIncrease = [];\n    if (data.length > 0) {\n      // Calculates the change between totals each day\n      // First one starts from 0 so just push the total\n      dailyIncrease.push({\"date\": data[0].date, \"increase\": Number.parseInt(data[0].total)})\n      for (let i = 1; i < data.length; i++) {\n        const increase = Number.parseInt(data[i].total) - Number.parseInt(data[i-1].total);\n        if (increase > 0) {\n          dailyIncrease.push({\"date\": data[i].date, \"increase\": increase})\n        }\n      }\n    }\n    return dailyIncrease\n  }\n\n  useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      setChartData(calculateDailyIncrease(data[dataType]));\n    }\n  }, [data, dataType])\n\n  const handleTickFormat = (number) => {\n    if (number > 1000000) {\n      return (number/1000000).toString() + 'M';\n    } else if (number > 1000) {\n      return (number/1000).toString() + 'K';\n    } else {\n      return number.toString();\n    }\n  }\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    const formatValue = (value) => {\n      return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    }\n\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\" style={{textAlign: \"center\", background: \"rgba(255, 255, 255, 0.75)\"}}>\n          <div className=\"label\">{`${label}`}</div>\n          {payload.map((dataPoint, index) => {\n            const dataType = dataPoint.name[0].toUpperCase() + dataPoint.name.slice(1);\n            return <div className={dataType} key={index}> {`${dataType}: ${formatValue(dataPoint.value)}`} </div>\n          })}\n          <div className=\"desc\">Click to set date back to {label}.</div>\n        </div>\n      );\n    }\n  \n    return null;\n  };\n  \n  const capitalizedCountry = country[0].toUpperCase() + country.slice(1)\n\n  const yAxisDict = {\n    \"confirmed\": `New Confirmed Cases (${capitalizedCountry})`,\n    \"recovered\": `Daily Recovered (${capitalizedCountry})`,\n    \"deaths\": `Daily Deceased (${capitalizedCountry})`,\n  }\n\n  \n  \n  return (\n    <ResponsiveContainer height=\"50%\">\n      <BarChart data={chartData} onClick={(e) => setDate(e.activePayload[0].payload.date)} style={{\"cursor\": \"pointer\"}}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip content={<CustomTooltip/>} />\n        <XAxis dataKey=\"date\" />\n        <YAxis \n          tickFormatter={(tick) => handleTickFormat(tick)}\n          label={{ value: yAxisDict[dataType], offset: 15, angle: -90, position: 'insideBottomLeft' }}\n        />\n        <Bar barSize={10} dataKey=\"increase\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default DailyChart;","import React, { useState, useEffect } from 'react';\n\nimport TotalChart from \"./TotalChart\";\nimport DailyChart from \"./DailyChart\";\n\nimport { Grid, Button, Header } from 'semantic-ui-react';\n\nconst Charts = ({ data, dataType, country, date, setDate, resetDate }) => {\n\n    const [ graphArrays, setGraphArrays ] = useState({});\n\n    const createGraphArrays = (countryData) => {\n        // Combine the data for all provinces for given country, and produces an object the graphs can work with\n        const graphArrays = {\"confirmed\": [], \"recovered\": [], \"deaths\": []};\n        Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n            Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n                dataSet.forEach(([date, total], i) => {\n                    if (graphArrays[dataType][i]) {\n                        graphArrays[dataType][i] = {...graphArrays[dataType][i],  total: graphArrays[dataType][i].total + Number(total)}\n                    } else {\n                        graphArrays[dataType][i] = { \"date\": date, \"total\": Number(total) }\n                    }\n                })\n            })\n        })\n        \n        return graphArrays;\n    }\n\n    useEffect(() => {\n        setGraphArrays(createGraphArrays(data))\n    }, [data])\n\n    const getFormattedDate = () => {\n        const presentDateObj = new Date();\n        const day = presentDateObj.getDate();\n        const month = presentDateObj.getMonth();\n        const year = presentDateObj.getFullYear().toString().slice(2);\n        return `${month}/${day}/${year}`\n    }\n\n    return (\n        <Grid.Column className=\"charts\" width={8}  style={{maxHeight: \"50vh\"}}>\n            <Header as=\"h2\" textAlign=\"center\">Date: {(date!==null) ? date : getFormattedDate()}</Header>\n            {(date!==null) ?  <Button onClick={() => resetDate()}>Revert to Present Date</Button>: \"\"}\n          <TotalChart country={country} data={graphArrays} setDate={setDate}/> \n          <DailyChart country={country} data={graphArrays} dataType={dataType} setDate={setDate}/> \n        </Grid.Column>\n\n    )\n}\n\nexport default Charts;\n\n// style = {{ width: \"50%\", float: \"right\", textAlign: \"right\"}}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Grid } from 'semantic-ui-react';\n\nimport Statistics from './components/Statistics';\nimport Map from \"./components/Map\";\nimport Charts from \"./components/Charts\";\n\nimport * as d3 from 'd3';\n\nconst App = () => {\n  \n  const [ data, setData ] = useState({data: {}, isFetching: true})\n  const [ USData, ] = useState({data: {}, isFetching: true})\n  const [ country, setCountry ] = useState(\"world\")\n  const [ dataType, setDataType ] = useState(\"confirmed\")\n  const [ countryData, setCountryData ] = useState({original: {}, timeLimited: {} })\n  const [ dateLimit, setDateLimit ] = useState(null)\n\n\n  const getSingularDataType = async (dataType) => { // Sets one data type at a time, saves on copy/paste\n\n    const isSameDate = (dateObj1, dateObj2) => (dateObj1.getDate() === dateObj2.getDate() && dateObj1.getMonth() === dateObj2.getMonth() && dateObj1.getFullYear() === dateObj2.getFullYear()) \n\n    const cache = await caches.open('data.json')\n    const url = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${dataType}_global.csv`\n    const cachedData = await cache.match(url)\n    const dataDate = new Date(localStorage.getItem('dataDate'));\n    if (cachedData === undefined || !isSameDate(new Date(), new Date(dataDate))) {\n      const response = await fetch(url)\n      const csvString = await response.text()\n      const rawData = await d3.csvParse(csvString)\n      cache.put(url, new Response(JSON.stringify(rawData)))\n      localStorage.setItem('dataDate', new Date())\n      return { [dataType]: rawData }\n    } else {\n      const rawData = await cachedData.json()\n      return { [dataType]: rawData }\n    }\n\n  }\n\n\n  useEffect(() => {\n    const getData = async () => { // Sets all 3 data types\n      let returnObj = {}\n      await Promise.all(\n        [getSingularDataType(\"confirmed\"),\n        getSingularDataType(\"deaths\"),\n        getSingularDataType(\"recovered\")]\n      ).then(dataTypes => {\n        for (let i = 0; i < dataTypes.length; i++) {\n          returnObj = {...returnObj, ...dataTypes[i]}\n        }\n      })\n      return returnObj\n    }\n    \n    getData().then(rawData => {\n      setData({rawData, isFetching:false})\n    })\n  }, [])\n\n  // Create time series for all countries based on raw data (for use in components)\n  const createCountryTimeSeries = (countryData) => {\n    const createSortedTimeSeriesArray = (dataTypeProvinceData) => {\n      // Takes time series object for chosen country and turns into sorted array of form [[date, value],]\n      return dataTypeProvinceData.sort((a, b) => {\n          // Split date strings into segments, then sort by Y, M, D (US format dates)\n          const [aArr, bArr] = [a[0].split('/'), b[0].split('/')]\n          const checkingOrder = [2, 0, 1];\n          for (let i = 0; i < checkingOrder.length; i++) {\n              const c = checkingOrder[i];\n              const [aVal, bVal] = [Number.parseInt(aArr[c]), Number.parseInt(bArr[c])]\n              if (aVal > bVal) {\n                  return 1;\n              } else if (bVal > aVal) {\n                  return -1;\n              }\n          }\n          return 0\n      })\n    }\n\n    // Go through each of the provinces and create a separate entry for each; if none, will just do country as a whole\n    const sortedTimeSeriesArrays = {}\n    Object.entries(countryData).forEach(([dataType, provinces]) => {\n      provinces.forEach((province) => {\n        const subprovinceName = (province[\"Province/State\"] === \"\") ? \"\" : `, ${province[\"Province/State\"]}`;\n        // Handle US slightly differently, easier to deal with\n        const provinceName = (province[\"Country/Region\"] === \"US\") ? \"United States\" : province[\"Country/Region\"];\n        const provinceText = provinceName + subprovinceName;\n        const provinceData = Object.entries(province).filter(([key, value]) => !isNaN(key[0]))\n        // Create province name in time series array if not already created\n        sortedTimeSeriesArrays[provinceText] = (sortedTimeSeriesArrays[provinceText]) ? {...sortedTimeSeriesArrays[provinceText]} : {};\n        sortedTimeSeriesArrays[provinceText][dataType] = createSortedTimeSeriesArray(provinceData);\n      })\n    });\n    return sortedTimeSeriesArrays;\n  }\n\n  // Side effect for changing country based on clicking on map\n  useEffect(() => {\n    // Create countryData, if for world, do for all countries, each country functions as a \"province\"\n    if (!data.isFetching) {\n      const getCountryData = (data) => {\n        if (country === \"world\") {\n          return createCountryTimeSeries(data.rawData)\n        } else {\n          const countryData = {}\n          Object.entries(data.rawData).forEach(([dataType, dataSet]) => {\n            countryData[dataType] = dataSet.filter((obj) => obj[\"Country/Region\"].toLowerCase() === country)\n          })\n          return createCountryTimeSeries(countryData)\n        }\n      }\n      const originalCountryData = getCountryData(data)\n      setCountryData({ original: originalCountryData, timeLimited: originalCountryData })\n    }\n  }, [country, data, USData])\n\n  // Side effect for changing date based on clicking on chart \n  useEffect(() => {\n    if (dateLimit !== null) {\n      const newCountryData = {}\n      const dateLimitObj = new Date(dateLimit)\n      Object.entries(countryData.original).forEach(([provinceName, provinceData]) => {\n        newCountryData[provinceName] = {}\n        Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n          newCountryData[provinceName][dataType] = dataSet.filter(([date, ]) => dateLimitObj >= new Date(date))\n        })\n      })\n      setCountryData((currentData) => ({ ...currentData, timeLimited: newCountryData }) );\n    }\n  }, [dateLimit, countryData.original])\n\n  const handleDateReset = () => {\n    setDateLimit(null)\n    const originalCountryData = countryData.original\n    setCountryData({ original: originalCountryData, timeLimited: originalCountryData })\n  }\n\n  return (\n    <div className=\"App\">\n        <Statistics data={countryData.timeLimited} handleClick={setDataType}/>\n      <Grid stackable columns={2}>\n          <Map setCountry={setCountry} country={country} data={countryData.timeLimited}/>\n          <Charts country={country}data={countryData.timeLimited} dataType={dataType} date={dateLimit} resetDate={handleDateReset} setDate={setDateLimit} /> \n      </Grid>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n\n// Bugs \n// States color being set to that of country rather than individual state\n// Clean up all warning\n\n// Nice to have\n// Some countries lack maps, possibly a way to fix this? If not no big deal\n"],"sourceRoot":""}