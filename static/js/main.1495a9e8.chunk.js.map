{"version":3,"sources":["utilities/calculateMapStats.js","utilities/capitalizeCountry.js","utilities/getProcessedUSData.js","utilities/formatTicks.js","utilities/getProvinceColors.js","utilities/invertDictionary.js","utilities/capitalize.js","utilities/formatCountryNameCamelCase.js","utilities/filterCountryDataByDate.js","utilities/createCountryTimeSeries.js","components/Statistics/index.js","utilities/getStatisticsFromData.js","utilities/addCommasToNumber.js","topojsons/all-jsons.js","topojsons/countryToIDDictionary.js","components/Map/MapStyling.js","components/Map/MapTooltip.js","countryNameDictionary.js","components/Map/index.js","utilities/preprocessProvincialData.js","components/Charts/TotalChart/TotalChartTooltip.js","components/Charts/TotalChart/index.js","utilities/getLineData.js","components/Charts/DailyChart/DailyChartTooltip.js","components/Charts/DailyChart/index.js","utilities/calculateDailyIncrease.js","components/Charts/index.js","utilities/createGraphArrays.js","utilities/getFormattedDate.js","requests/getSingularDataType.js","requests/getAllDataTypes.js","components/MainPage/index.js","requests/getCountryData.js","App.js","index.js"],"names":["calculateMapStats","countryData","provinceStats","Object","entries","forEach","provinceName","provinceData","confirmed","length","mostRecentTotal","slice","tenDaysAgoTotal","numberOfNewInfections","rateOfChange","toLowerCase","tenDaysNewInfections","tooltipMapStat","mapColorStat","capitalizeCountry","country","split","map","word","toUpperCase","join","getProcessedUSData","a","getUSData","csv","rawData","processUSData","USData","processedData","localDataSet","stateName","localData","filter","key","isNaN","Number","dataPoint","index","newTotal","parseInt","then","data","formatTicks","number","toString","getProvinceColors","currentCountry","mapStats","countryNameDictionary","rainbow","Rainbow","setSpectrum","dictionary","defaultColor","includes","colourAt","Math","floor","countryIdDictionary","reduce","invertedDict","create","default","provinces","colorString","provinceStat","provinceId","undefined","hue","capitalize","charAt","toLocaleUpperCase","toLocaleLowerCase","formatCountryNameCamelCase","countryName","filterCountryDataByDate","dateLimit","newCountryData","dateLimitObj","Date","original","dataType","dataSet","date","createCountryTimeSeries","sortedTimeSeriesArrays","province","subprovinceName","provinceText","sort","b","aArr","bArr","checkingOrder","i","c","aVal","bVal","textColors","recovered","deaths","Statistics","handleClick","useState","statistics","setStatistics","useEffect","stats","getStatisticsFromData","hoveredStat","setHoveredStat","Grid","columns","divided","Column","statName","statValue","statNameCapitalized","statValueWithCommas","replace","width","className","onClick","onMouseEnter","e","target","handleHover","onMouseLeave","style","fontSize","cursor","textAlign","color","Popup","content","basic","trigger","componentJsonDictionary","world","worldLowRes","ao","ar","am","au","at","az","bd","by","be","bt","bo","ba","bw","br","bn","bg","bf","bi","kh","cm","ca","cf","td","cl","cn","co","cd","cg","cr","hr","cu","cy","cz","dk","dj","do","ec","eg","sv","ee","et","fi","fr","ge","de","gr","gt","gn","ht","hn","hu","is","in","id","ir","iq","ie","il","it","jm","jp","kz","ke","xk","kg","la","lv","lt","lu","mk","my","ml","mx","md","me","ma","mm","np","nl","nz","ni","ng","no","om","pk","ps","pa","py","ph","pl","pt","qa","ro","ru","rw","sa","rs","sl","sk","si","za","kr","es","lk","se","ch","sy","tw","tj","th","tr","ug","ua","ae","gb","uy","us","uz","ve","vn","ye","countryToIDDictionary","angola","argentina","armenia","australia","austria","azerbaijan","bangladesh","belarus","belgium","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","congo","croatia","cuba","cyprus","denmark","djibouti","ecuador","egypt","estonia","ethiopia","finland","france","georgia","germany","greece","guatemala","guinea","haiti","honduras","hungary","iceland","india","indonesia","iran","iraq","ireland","israel","italy","jamaica","japan","kazakhstan","kenya","kosovo","kyrgyzstan","laos","latvia","lithuania","luxembourg","macedonia","malaysia","mali","mexico","moldova","montenegro","morocco","myanmar","nepal","netherlands","nicaragua","nigeria","norway","oman","pakistan","palestine","panama","paraguay","philippines","poland","portugal","qatar","romania","russia","rwanda","serbia","slovakia","slovenia","spain","sweden","switzerland","syria","taiwan","tajikistan","thailand","turkey","uganda","ukraine","uruguay","usa","uzbekistan","venezuela","vietnam","yemen","MapStyling","styled","div","props","colors","createMapTooltip","formatNumbers","Header","Content","toFixed","Map","setMapStats","provinceColors","setProvinceColors","countryId","setMap","tooltipOpen","setTooltipOpen","tooltipText","setToolTipText","tooltipRef","useRef","nationwideData","push","keys","as","Button","setCountry","layerProps","attributes","value","hoveredCountry","name","current","context","position","onClose","open","TotalChartTooltip","active","payload","label","background","TotalChart","setDate","lineData","setLineData","ld","total","getLineData","capitalizedCountry","height","activePayload","handleSetDate","strokeDasharray","verticalAlign","dataKey","tickFormatter","tick","offset","angle","type","stroke","fill","DailyChartTooltip","string","valueType","yAxisDict","DailyChart","chartData","setChartData","dailyIncrease","increase","calculateDailyIncrease","barSize","Charts","resetDate","graphArrays","setGraphArrays","createGraphArrays","maxHeight","presentDateObj","day","getDate","month","getMonth","year","getFullYear","getFormattedDate","getSingularDataType","isSameDate","dateObj1","dateObj2","caches","cache","url","match","cachedData","dataDate","localStorage","getItem","fetch","response","text","csvString","d3","put","Response","JSON","stringify","setItem","json","getAllDataTypes","returnObj","Promise","all","dataTypes","MainPage","isFetching","setData","setDataType","timeLimited","setCountryData","setDateLimit","originalCountryData","obj","getCountryData","currentData","navigate","useNavigate","stackable","App","countryNames","values","path","element","to","ReactDOM","render","document","getElementById"],"mappings":"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CP,GAAO,OACP,GAAO,SACP,GAAO,UACP,GAAO,UACP,GAAO,QACP,GAAO,YACP,GAAO,aACP,GAAO,kBACP,GAAO,SACP,GAAO,WACP,GAAO,OACP,GAAO,UACP,GAAO,UACP,GAAO,aACP,GAAO,aACP,GAAO,aACP,GAAO,aACP,GAAO,QACP,GAAO,WACP,GAAO,SACP,GAAO,UACP,GAAO,QACP,GAAO,cACP,GAAO,cACP,GAAO,YACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,OACP,GAAO,WACP,GAAO,YACP,GAAO,SACP,GAAO,OACP,GAAO,mBACP,GAAO,WACP,GAAO,cACP,GAAO,SACP,GAAO,WACP,GAAO,QACP,GAAO,UACP,GAAO,SACP,GAAO,SACP,GAAO,eACP,GAAO,UACP,GAAO,SACP,GAAO,eACP,GAAO,WACP,GAAO,WACP,GAAO,UACP,GAAO,eACP,GAAO,eACP,GAAO,QACP,GAAO,YACP,GAAO,SACP,GAAO,QACP,GAAO,cACP,GAAO,WACP,GAAO,cACP,GAAO,QACP,GAAO,aACP,GAAO,WACP,GAAO,OACP,GAAO,UACP,GAAO,eACP,GAAO,WACP,GAAO,SACP,GAAO,UACP,GAAO,SACP,GAAO,UACP,GAAO,uBACP,GAAO,iBACP,GAAO,UACP,GAAO,gBACP,GAAO,aACP,GAAO,YACP,GAAO,UACP,GAAO,iBACP,GAAO,QACP,GAAO,SACP,GAAO,WAGP,SAAU,6BACV,SAAU,wBACV,QAAS,gCACT,QAAS,6BACT,QAAS,+BACT,SAAU,sBACV,SAAU,sBACV,SAAU,0CAEV,QAAS,eACT,QAAS,iBACT,QAAS,mBACT,QAAS,gBACT,QAAS,mBACT,QAAS,eACT,QAAS,iBACT,QAAS,iBACT,QAAS,gBACT,QAAS,eACT,QAAS,eACT,QAAS,mBACT,QAAS,sBACT,QAAS,eACT,QAAS,eACT,QAAS,eACT,QAAS,iBACT,QAAS,iBACT,QAAS,kBACT,QAAS,eACT,QAAS,wBACT,QAAS,iBACT,QAAS,iBACT,QAAS,iBACT,QAAS,iBACT,QAAS,kBACT,QAAS,kBACT,QAAS,gBACT,QAA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","file":"static/js/main.1495a9e8.chunk.js","sourcesContent":["export const calculateMapStats = (countryData) => {\n  const provinceStats = {};\n  Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n    if (provinceData.confirmed && provinceData.confirmed.length > 0) {\n      const mostRecentTotal = provinceData.confirmed.slice(-1)[0][1];\n      const tenDaysAgoTotal = provinceData.confirmed.slice(-10)[0][1];\n      const numberOfNewInfections = mostRecentTotal - tenDaysAgoTotal;\n      // Prevent divide by 0\n      const rateOfChange =\n        mostRecentTotal === \"0\" ? 0 : numberOfNewInfections / mostRecentTotal;\n      // Different threshold depending on if provincial or national sum\n      const maxRedValue = 20000;\n      provinceStats[provinceName.toLowerCase()] = {\n        mostRecentTotal,\n        tenDaysAgoTotal,\n        tenDaysNewInfections: numberOfNewInfections,\n        rateOfChange,\n        tooltipMapStat: rateOfChange * numberOfNewInfections,\n        mapColorStat:\n          (rateOfChange * numberOfNewInfections) / (maxRedValue / 100),\n      };\n    }\n  });\n  return provinceStats;\n};\n","export const capitalizeCountry = (country) =>\n  country\n    .split(\" \")\n    .map((word) => word[0].toUpperCase() + word.slice(1))\n    .join(\" \");\n","import { csv } from \"d3\";\n\nexport const getProcessedUSData = async () => {\n  const getUSData = async () => {\n    const rawData = await csv(\n      `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv`\n    );\n    return rawData;\n  };\n\n  const processUSData = (USData) => {\n    // Need to clean the data a little bit, the dictionary keys don't match\n    const processedData = {};\n    USData.forEach((localDataSet) => {\n      const stateName = `united states, ${localDataSet[\"Province_State\"]}`;\n      const localData = Object.entries(localDataSet).filter(([key, entry]) => {\n        return !isNaN(Number(key[0]));\n      });\n      if (processedData[stateName]) {\n        localData.forEach((dataPoint, index) => {\n          const newTotal =\n            Number.parseInt(processedData[stateName].confirmed[index][1]) +\n            Number.parseInt(dataPoint[1]);\n          processedData[stateName].confirmed[index][1] = newTotal;\n        });\n      } else {\n        processedData[stateName] = { confirmed: localData };\n      }\n    });\n    return processedData;\n  };\n  let processedData;\n  await getUSData().then((data) => {\n    processedData = processUSData(data);\n  });\n  return processedData;\n};\n","import { format } from \"path\";\n\nexport const formatTicks = (number) => {\n  if (number > 1000000) {\n    return (number / 1000000).toString() + \"M\";\n  } else if (number > 1000) {\n    return (number / 1000).toString() + \"K\";\n  } else {\n    return number.toString();\n  }\n};\n","import { invertDictionary } from \"./invertDictionary\";\nimport Rainbow from \"rainbowvis.js\";\n\nexport const getProvinceColors = ({\n  currentCountry,\n  mapStats,\n  countryNameDictionary,\n}) => {\n  // Set a custom color gradient from 0=green to 100=red\n  const rainbow = new Rainbow();\n  rainbow.setSpectrum(\"#29e229\", \"#ddd623\", \"#e72a2a\");\n  const defaultColorCountries = [\n    \"world\",\n    \"canada\",\n    \"australia\",\n    \"china\",\n    \"united states\",\n  ];\n  const defaultColor = defaultColorCountries.includes(currentCountry)\n    ? \"grey\"\n    : \"#\" + rainbow.colourAt(Math.floor(mapStats[currentCountry].mapColorStat));\n  const countryIdDictionary = invertDictionary(countryNameDictionary);\n\n  const newProvinceColors = Object.entries(mapStats).reduce(\n    (colorString, [provinceName, provinceStat]) => {\n      const provinceId = countryIdDictionary[provinceName.toLowerCase()];\n      if (provinceId !== undefined) {\n        // Object is in dictionary (not a boat or small country etc)\n        const hue = rainbow.colourAt(Math.floor(provinceStat.mapColorStat));\n        colorString += `&[id=\"${provinceId}\"] {fill: #${hue}}`;\n      }\n      return colorString;\n    },\n    \"\"\n  );\n\n  return {\n    default: defaultColor,\n    provinces: newProvinceColors,\n  };\n};\n","export const invertDictionary = (dictionary) => {\n  // Invert dictionary to make lookup dictionary (Easier to lookup by IDs vs country names, b/c capitalization)\n  return Object.entries(dictionary).reduce((invertedDict, [key, value]) => {\n    invertedDict[value] = key;\n    return invertedDict;\n  }, Object.create(null));\n};\n","export const capitalize = (word) => {\n  return word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase();\n};\n","import { capitalize } from \"./capitalize\";\n\nexport const formatCountryNameCamelCase = (countryName) => {\n  return countryName\n    .split(\" \")\n    .map((word, index) => {\n      if (index === 0) {\n        return word.toLocaleLowerCase();\n      }\n      return capitalize(word);\n    })\n    .join(\"\");\n};\n","export const filterCountryDataByDate = (countryData, dateLimit) => {\n  const newCountryData = {};\n  const dateLimitObj = new Date(dateLimit);\n  Object.entries(countryData.original).forEach(\n    ([provinceName, provinceData]) => {\n      newCountryData[provinceName] = {};\n      Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n        newCountryData[provinceName][dataType] = dataSet.filter(\n          ([date]) => dateLimitObj >= new Date(date)\n        );\n      });\n    }\n  );\n  return newCountryData;\n};\n","export const createCountryTimeSeries = (countryData) => {\n  const createSortedTimeSeriesArray = (dataTypeProvinceData) => {\n    // Takes time series object for chosen country and turns into sorted array of form [[date, value],]\n    return dataTypeProvinceData.sort((a, b) => {\n      // Split date strings into segments, then sort by Y, M, D (US format dates)\n      const [aArr, bArr] = [a[0].split(\"/\"), b[0].split(\"/\")];\n      const checkingOrder = [2, 0, 1];\n      for (let i = 0; i < checkingOrder.length; i++) {\n        const c = checkingOrder[i];\n        const [aVal, bVal] = [\n          Number.parseInt(aArr[c]),\n          Number.parseInt(bArr[c]),\n        ];\n        if (aVal > bVal) {\n          return 1;\n        } else if (bVal > aVal) {\n          return -1;\n        }\n      }\n      return 0;\n    });\n  };\n\n  // Go through each of the provinces and create a separate entry for each; if none, will just do country as a whole\n  const sortedTimeSeriesArrays = {};\n  Object.entries(countryData).forEach(([dataType, provinces]) => {\n    provinces.forEach((province) => {\n      const subprovinceName =\n        province[\"Province/State\"] === \"\"\n          ? \"\"\n          : `, ${province[\"Province/State\"]}`;\n      // Handle US slightly differently, easier to deal with\n      const provinceName =\n        province[\"Country/Region\"] === \"US\"\n          ? \"United States\"\n          : province[\"Country/Region\"];\n      const provinceText = provinceName + subprovinceName;\n      const provinceData = Object.entries(province).filter(\n        ([key, value]) => !isNaN(key[0])\n      );\n      // Create province name in time series array if not already created\n      sortedTimeSeriesArrays[provinceText] = sortedTimeSeriesArrays[\n        provinceText\n      ]\n        ? { ...sortedTimeSeriesArrays[provinceText] }\n        : {};\n      sortedTimeSeriesArrays[provinceText][dataType] =\n        createSortedTimeSeriesArray(provinceData);\n    });\n  });\n  return sortedTimeSeriesArrays;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Popup } from \"semantic-ui-react\";\nimport {\n  getStatisticsFromData,\n  capitalize,\n  addCommasToNumber,\n} from \"../../utilities\";\nconst textColors = {\n  confirmed: \"#8884d8\",\n  recovered: \"#54ed40\",\n  deaths: \"#f72e2e\",\n};\n\nconst Statistics = ({ handleClick, data }) => {\n  const [statistics, setStatistics] = useState({\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n  });\n  useEffect(() => {\n    setStatistics(getStatisticsFromData(data));\n  }, [data]);\n\n  const [hoveredStat, setHoveredStat] = useState(\"\");\n  const handleHover = (e) => {\n    setHoveredStat(e.target.className.split(\" \").slice(-1)[0]);\n  };\n\n  return (\n    <Grid columns=\"5\" divided>\n      <Grid.Column />\n      {Object.entries(statistics).map(([statName, statValue], index) => {\n        const statNameCapitalized = capitalize(statName);\n        const statValueWithCommas = addCommasToNumber(statValue);\n        return (\n          <Grid.Column\n            key={index}\n            width={3}\n            className={statName}\n            onClick={() => handleClick(statName)}\n            onMouseEnter={(e) => handleHover(e)}\n            onMouseLeave={() => setHoveredStat(\"\")}\n            style={{\n              fontSize: hoveredStat === statName ? \"large\" : \"medium\",\n              cursor: \"pointer\",\n              textAlign: \"center\",\n              color: textColors[statName],\n            }}\n          >\n            <Popup\n              content=\"Click to change daily chart contents\"\n              basic\n              trigger={\n                <div>{`${statNameCapitalized}: ${statValueWithCommas}`}</div>\n              }\n            />\n          </Grid.Column>\n        );\n      })}\n      <Grid.Column />\n    </Grid>\n  );\n};\n\nexport default Statistics;\n","export const getStatisticsFromData = (data) => {\n  const stats = { confirmed: 0, recovered: 0, deaths: 0 };\n  // Find the most recent value for each province and add to totals for relevant dataset type\n  Object.entries(data).forEach(([, provinceData]) => {\n    Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n      // dataSet is of form [[date, total(str)]], so take last total of each and add it\n      stats[dataType] += Number.parseInt(dataSet.slice(-1)[0][1]);\n    });\n  });\n  return stats;\n};\n","export const addCommasToNumber = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","import world from \"../topojsons/world.json\";\nimport worldLowRes from \"../topojsons/world-low-res.json\";\n\nimport ao from \"../topojsons/angola.json\";\nimport ar from \"../topojsons/argentina.json\";\nimport am from \"../topojsons/armenia.json\";\nimport au from \"../topojsons/australia.json\";\nimport at from \"../topojsons/austria.json\";\nimport az from \"../topojsons/azerbaijan.json\";\nimport bd from \"../topojsons/bangladesh.json\";\nimport by from \"../topojsons/belarus.json\";\nimport be from \"../topojsons/belgium.json\";\nimport bt from \"../topojsons/bhutan.json\";\nimport bo from \"../topojsons/bolivia.json\";\nimport ba from \"../topojsons/bosnia-herzegovina.json\";\nimport bw from \"../topojsons/botswana.json\";\nimport br from \"../topojsons/brazil.json\";\nimport bn from \"../topojsons/brunei-darussalam.json\";\nimport bg from \"../topojsons/bulgaria.json\";\nimport bf from \"../topojsons/burkina-faso.json\";\nimport bi from \"../topojsons/burundi.json\";\nimport kh from \"../topojsons/cambodia.json\";\nimport cm from \"../topojsons/cameroon.json\";\nimport ca from \"../topojsons/canada.json\";\nimport cf from \"../topojsons/central-african-republic.json\";\nimport td from \"../topojsons/chad.json\";\nimport cl from \"../topojsons/chile.json\";\nimport cn from \"../topojsons/china.json\";\nimport co from \"../topojsons/colombia.json\";\nimport cd from \"../topojsons/congo-dr.json\";\nimport cg from \"../topojsons/congo.json\";\nimport cr from \"../topojsons/costa-rica.json\";\nimport hr from \"../topojsons/croatia.json\";\nimport cu from \"../topojsons/cuba.json\";\nimport cy from \"../topojsons/cyprus.json\";\nimport cz from \"../topojsons/czech-republic.json\";\nimport dk from \"../topojsons/denmark.json\";\nimport dj from \"../topojsons/djibouti.json\";\nimport dom from \"../topojsons/dominican-republic.json\";\nimport ec from \"../topojsons/ecuador.json\";\nimport eg from \"../topojsons/egypt.json\";\nimport sv from \"../topojsons/el-salvador.json\";\nimport ee from \"../topojsons/estonia.json\";\nimport et from \"../topojsons/ethiopia.json\";\nimport fi from \"../topojsons/finland.json\";\nimport fr from \"../topojsons/france.json\";\nimport ge from \"../topojsons/georgia.json\";\nimport de from \"../topojsons/germany.json\";\nimport gr from \"../topojsons/greece.json\";\nimport gt from \"../topojsons/guatemala.json\";\nimport gn from \"../topojsons/guinea.json\";\nimport ht from \"../topojsons/haiti.json\";\nimport hn from \"../topojsons/honduras.json\";\nimport hu from \"../topojsons/hungary.json\";\nimport is from \"../topojsons/iceland.json\";\nimport ind from \"../topojsons/india.json\";\nimport id from \"../topojsons/indonesia.json\";\nimport ir from \"../topojsons/iran.json\";\nimport iq from \"../topojsons/iraq.json\";\nimport ie from \"../topojsons/ireland.json\";\nimport il from \"../topojsons/israel.json\";\nimport it from \"../topojsons/italy.json\";\nimport jm from \"../topojsons/jamaica.json\";\nimport jp from \"../topojsons/japan.json\";\nimport kz from \"../topojsons/kazakhstan.json\";\nimport ke from \"../topojsons/kenya.json\";\nimport xk from \"../topojsons/kosovo.json\";\nimport kg from \"../topojsons/kyrgyzstan.json\";\nimport la from \"../topojsons/laos.json\";\nimport lv from \"../topojsons/latvia.json\";\nimport lt from \"../topojsons/lithuania.json\";\nimport lu from \"../topojsons/luxembourg.json\";\nimport mk from \"../topojsons/macedonia.json\";\nimport my from \"../topojsons/malaysia.json\";\nimport ml from \"../topojsons/mali.json\";\nimport mx from \"../topojsons/mexico.json\";\nimport md from \"../topojsons/moldova.json\";\nimport me from \"../topojsons/montenegro.json\";\nimport ma from \"../topojsons/morocco.json\";\nimport mm from \"../topojsons/myanmar.json\";\nimport np from \"../topojsons/nepal.json\";\nimport nl from \"../topojsons/netherlands.json\";\nimport nz from \"../topojsons/new-zealand-2.json\";\nimport ni from \"../topojsons/nicaragua.json\";\nimport ng from \"../topojsons/nigeria.json\";\nimport no from \"../topojsons/norway.json\";\nimport om from \"../topojsons/oman.json\";\nimport pk from \"../topojsons/pakistan.json\";\nimport ps from \"../topojsons/palestine.json\";\nimport pa from \"../topojsons/panama.json\";\nimport py from \"../topojsons/paraguay.json\";\nimport ph from \"../topojsons/philippines.json\";\nimport pl from \"../topojsons/poland.json\";\nimport pt from \"../topojsons/portugal.json\";\nimport qa from \"../topojsons/qatar.json\";\nimport ro from \"../topojsons/romania.json\";\nimport ru from \"../topojsons/russia.json\";\nimport rw from \"../topojsons/rwanda.json\";\nimport sa from \"../topojsons/saudi-arabia.json\";\nimport rs from \"../topojsons/serbia.json\";\nimport sl from \"../topojsons/sierra-leone.json\";\nimport sk from \"../topojsons/slovakia.json\";\nimport si from \"../topojsons/slovenia.json\";\nimport za from \"../topojsons/south-africa.json\";\nimport kr from \"../topojsons/south-korea.json\";\nimport es from \"../topojsons/spain.json\";\nimport lk from \"../topojsons/sri-lanka.json\";\nimport se from \"../topojsons/sweden.json\";\nimport ch from \"../topojsons/switzerland.json\";\nimport sy from \"../topojsons/syria.json\";\nimport tw from \"../topojsons/taiwan.json\";\nimport tj from \"../topojsons/tajikistan.json\";\nimport th from \"../topojsons/thailand.json\";\nimport tr from \"../topojsons/turkey.json\";\nimport ug from \"../topojsons/uganda.json\";\nimport ua from \"../topojsons/ukraine.json\";\nimport ae from \"../topojsons/united-arab-emirates.json\";\nimport gb from \"../topojsons/united-kingdom.json\";\nimport uy from \"../topojsons/uruguay.json\";\nimport us from \"../topojsons/usa.json\";\nimport uz from \"../topojsons/uzbekistan.json\";\nimport ve from \"../topojsons/venezuela.json\";\nimport vn from \"../topojsons/vietnam.json\";\nimport ye from \"../topojsons/yemen.json\";\n\n// import xy from '../topojsons/andorra.json';\n// import bh from '../topojsons/bahamas.json';\n// import xy from '../topojsons/bahrain.json';\n// import ba from '../topojsons/bosnia-herzegovina-2.json';\n// import xy from '../topojsons/cape-verde.json';\n// import cl from '../topojsons/chile-2.json';\n// import xy from '../topojsons/empty.json';\n// import xy from '../topojsons/faroeIslands.json';\n// import xy from '../topojsons/france-departments.json';\n// import xy from '../topojsons/france-new.json';\n// import xy from '../topojsons/hong-kong.json';\n// import xy from '../topojsons/liechtenstein.json';\n// import xy from '../topojsons/malta.json';\n// import xy from '../topojsons/new-zealand.json';\n// import xy from '../topojsons/portugal-regions.json';\n// import xy from '../topojsons/san-marino.json';\n// import xy from '../topojsons/serbia-without-kosovo.json';\n// import xy from '../topojsons/singapore.json';\n// import xy from '../topojsons/south-africa-2.json';\n// import xy from '../topojsons/spain-provinces.json';\n// import gb from '../topojsons/united-kingdom-counties.json';\n// import xy from '../topojsons/usa-not-calibrated.json';\n// import us from '../topojsons/usa-with-AK-HI.json';\n// import xy from '../topojsons/vietnam-with-islands.json';\n\n// import xy from '../topojsons/usa-ak.json';\n// import xy from '../topojsons/usa-al.json';\n// import xy from '../topojsons/usa-ar.json';\n// import xy from '../topojsons/usa-az.json';\n// import xy from '../topojsons/usa-ca.json';\n// import xy from '../topojsons/usa-co.json';\n// import xy from '../topojsons/usa-ct.json';\n// import xy from '../topojsons/usa-de.json';\n// import xy from '../topojsons/usa-fl.json';\n// import xy from '../topojsons/usa-ga.json';\n// import xy from '../topojsons/usa-hi.json';\n// import xy from '../topojsons/usa-ia.json';\n// import xy from '../topojsons/usa-id.json';\n// import xy from '../topojsons/usa-il.json';\n// import xy from '../topojsons/usa-in.json';\n// import xy from '../topojsons/usa-ks.json';\n// import xy from '../topojsons/usa-ky.json';\n// import xy from '../topojsons/usa-la.json';\n// import xy from '../topojsons/usa-ma.json';\n// import xy from '../topojsons/usa-md.json';\n// import xy from '../topojsons/usa-me.json';\n// import xy from '../topojsons/usa-mi.json';\n// import xy from '../topojsons/usa-mn.json';\n// import xy from '../topojsons/usa-mo.json';\n// import xy from '../topojsons/usa-ms.json';\n// import xy from '../topojsons/usa-mt.json';\n// import xy from '../topojsons/usa-nc.json';\n// import xy from '../topojsons/usa-nd.json';\n// import xy from '../topojsons/usa-ne.json';\n// import xy from '../topojsons/usa-nh.json';\n// import xy from '../topojsons/usa-nj.json';\n// import xy from '../topojsons/usa-nm.json';\n// import xy from '../topojsons/usa-nv.json';\n// import xy from '../topojsons/usa-ny.json';\n// import xy from '../topojsons/usa-oh.json';\n// import xy from '../topojsons/usa-ok.json';\n// import xy from '../topojsons/usa-or.json';\n// import xy from '../topojsons/usa-pa.json';\n// import xy from '../topojsons/usa-ri.json';\n// import xy from '../topojsons/usa-sc.json';\n// import xy from '../topojsons/usa-sd.json';\n// import xy from '../topojsons/usa-tn.json';\n// import xy from '../topojsons/usa-tx.json';\n// import xy from '../topojsons/usa-ut.json';\n// import xy from '../topojsons/usa-va.json';\n// import xy from '../topojsons/usa-vt.json';\n// import xy from '../topojsons/usa-wa.json';\n// import xy from '../topojsons/usa-wdc.json';\n// import xy from '../topojsons/usa-wi.json';\n// import xy from '../topojsons/usa-wv.json';\n// import xy from '../topojsons/usa-wy.json';\n\nexport const componentJsonDictionary = {\n  world,\n  worldLowRes,\n  ao,\n  ar,\n  am,\n  au,\n  at,\n  az,\n  bd,\n  by,\n  be,\n  bt,\n  bo,\n  ba,\n  bw,\n  br,\n  bn,\n  bg,\n  bf,\n  bi,\n  kh,\n  cm,\n  ca,\n  cf,\n  td,\n  cl,\n  cn,\n  co,\n  cd,\n  cg,\n  cr,\n  hr,\n  cu,\n  cy,\n  cz,\n  dk,\n  dj,\n  do: dom,\n  ec,\n  eg,\n  sv,\n  ee,\n  et,\n  fi,\n  fr,\n  ge,\n  de,\n  gr,\n  gt,\n  gn,\n  ht,\n  hn,\n  hu,\n  is,\n  in: ind,\n  id,\n  ir,\n  iq,\n  ie,\n  il,\n  it,\n  jm,\n  jp,\n  kz,\n  ke,\n  xk,\n  kg,\n  la,\n  lv,\n  lt,\n  lu,\n  mk,\n  my,\n  ml,\n  mx,\n  md,\n  me,\n  ma,\n  mm,\n  np,\n  nl,\n  nz,\n  ni,\n  ng,\n  no,\n  om,\n  pk,\n  ps,\n  pa,\n  py,\n  ph,\n  pl,\n  pt,\n  qa,\n  ro,\n  ru,\n  rw,\n  sa,\n  rs,\n  sl,\n  sk,\n  si,\n  za,\n  kr,\n  es,\n  lk,\n  se,\n  ch,\n  sy,\n  tw,\n  tj,\n  th,\n  tr,\n  ug,\n  ua,\n  ae,\n  gb,\n  uy,\n  us,\n  uz,\n  ve,\n  vn,\n  ye,\n};\n\n//\n//\n//\n","export const countryToIDDictionary = {\n  angola: \"ao\",\n  argentina: \"ar\",\n  armenia: \"am\",\n  australia: \"au\",\n  austria: \"at\",\n  azerbaijan: \"az\",\n  bangladesh: \"bd\",\n  belarus: \"by\",\n  belgium: \"be\",\n  bhutan: \"bt\",\n  bolivia: \"bo\",\n  \"bosnia-herzegovina\": \"ba\",\n  botswana: \"bw\",\n  brazil: \"br\",\n  \"brunei-darussalam\": \"bn\",\n  bulgaria: \"bg\",\n  \"burkina-faso\": \"bf\",\n  burundi: \"bi\",\n  cambodia: \"kh\",\n  cameroon: \"cm\",\n  canada: \"ca\",\n  \"central-african-republic\": \"cf\",\n  chad: \"td\",\n  chile: \"cl\",\n  china: \"cn\",\n  colombia: \"co\",\n  congo: \"cg\",\n  \"congo-dr\": \"cd\",\n  \"costa-rica\": \"cr\",\n  croatia: \"hr\",\n  cuba: \"cu\",\n  cyprus: \"cy\",\n  \"czech-republic\": \"cz\",\n  denmark: \"dk\",\n  djibouti: \"dj\",\n  \"dominican-republic\": \"do\",\n  ecuador: \"ec\",\n  egypt: \"eg\",\n  \"el-salvador\": \"sv\",\n  estonia: \"ee\",\n  ethiopia: \"et\",\n  finland: \"fi\",\n  france: \"fr\",\n  georgia: \"ge\",\n  germany: \"de\",\n  greece: \"gr\",\n  guatemala: \"gt\",\n  guinea: \"gn\",\n  haiti: \"ht\",\n  honduras: \"hn\",\n  hungary: \"hu\",\n  iceland: \"is\",\n  india: \"in\",\n  indonesia: \"id\",\n  iran: \"ir\",\n  iraq: \"iq\",\n  ireland: \"ie\",\n  israel: \"il\",\n  italy: \"it\",\n  jamaica: \"jm\",\n  japan: \"jp\",\n  kazakhstan: \"kz\",\n  kenya: \"ke\",\n  kosovo: \"xk\",\n  kyrgyzstan: \"kg\",\n  laos: \"la\",\n  latvia: \"lv\",\n  lithuania: \"lt\",\n  luxembourg: \"lu\",\n  macedonia: \"mk\",\n  malaysia: \"my\",\n  mali: \"ml\",\n  mexico: \"mx\",\n  moldova: \"md\",\n  montenegro: \"me\",\n  morocco: \"ma\",\n  myanmar: \"mm\",\n  nepal: \"np\",\n  netherlands: \"nl\",\n  \"new-zealand-2\": \"nz\",\n  nicaragua: \"ni\",\n  nigeria: \"ng\",\n  norway: \"no\",\n  oman: \"om\",\n  pakistan: \"pk\",\n  palestine: \"ps\",\n  panama: \"pa\",\n  paraguay: \"py\",\n  philippines: \"ph\",\n  poland: \"pl\",\n  portugal: \"pt\",\n  qatar: \"qa\",\n  romania: \"ro\",\n  russia: \"ru\",\n  rwanda: \"rw\",\n  \"saudi-arabia\": \"sa\",\n  serbia: \"rs\",\n  \"sierra-leone\": \"sl\",\n  slovakia: \"sk\",\n  slovenia: \"si\",\n  \"south-africa\": \"za\",\n  \"south-korea\": \"kr\",\n  spain: \"es\",\n  \"sri-lanka\": \"lk\",\n  sweden: \"se\",\n  switzerland: \"ch\",\n  syria: \"sy\",\n  taiwan: \"tw\",\n  tajikistan: \"tj\",\n  thailand: \"th\",\n  turkey: \"tr\",\n  uganda: \"ug\",\n  ukraine: \"ua\",\n  \"united-arab-emirates\": \"ae\",\n  \"united-kingdom\": \"gb\",\n  uruguay: \"uy\",\n  usa: \"us\",\n  uzbekistan: \"uz\",\n  venezuela: \"ve\",\n  vietnam: \"vn\",\n  world: \"worldLowRes\",\n  \"world-low-res\": \"worldLowRes\",\n  yemen: \"ye\",\n};\n","import styled from \"styled-components\";\n\nconst MapStyling = styled.div`\n  path {\n    ${(props) => props.colors.provinces}\n    &:hover {\n      opacity: 0.5;\n      cursor: pointer;\n    }\n  }\n  svg {\n    stroke: #fff;\n    fill: ${(props) => props.colors.default};\n    margin: 0% 5%;\n  }\n`;\n\nexport default MapStyling;\n","import React from \"react\";\nimport { Popup } from \"semantic-ui-react\";\nimport { capitalizeCountry } from \"../../utilities\";\n\nconst createMapTooltip = (country, province, mapStats) => {\n  const formatNumbers = (number) => {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n  if (mapStats[province]) {\n    const { mostRecentTotal, tenDaysNewInfections, rateOfChange } =\n      mapStats[province];\n    return (\n      <>\n        <Popup.Header>{capitalizeCountry(province)}</Popup.Header>\n        <Popup.Content>\n          <div>Most Recent Total {formatNumbers(mostRecentTotal)}</div>\n          <div>Ten Days New Cases {formatNumbers(tenDaysNewInfections)}</div>\n          <div>Rate of Change {rateOfChange.toFixed(2)}</div>\n          {country === \"world\" ? <div>Click Country for More Details</div> : \"\"}\n        </Popup.Content>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Popup.Header>{capitalizeCountry(province)}</Popup.Header>\n        <Popup.Content>\n          <div>No Data Available</div>\n        </Popup.Content>\n      </>\n    );\n  }\n};\n\nexport default createMapTooltip;\n","const countryNameDictionary = {\n    \"af\" : \"afghanistan\",\n    \"al\" : \"albania\",\n    \"dz\" : \"algeria\",\n    \"ao\" : \"angola\",\n    \"ar\" : \"argentina\",\n    \"am\" : \"armenia\",\n    \"au\" : \"australia\",\n    \"at\" : \"austria\",\n    \"az\" : \"azerbaijan\",\n    \"bd\" : \"bangladesh\",\n    \"by\" : \"belarus\",\n    \"be\" : \"belgium\",\n    \"bz\" : \"belize\",\n    \"bj\" : \"benin\",\n    \"bt\" : \"bhutan\",\n    \"bo\" : \"bolivia\",\n    \"ba\" : \"bosnia and herzegovina\",\n    \"bw\" : \"botswana\",\n    \"br\" : \"brazil\",\n    \"bn\" : \"brunei darussalam\",\n    \"bg\" : \"bulgaria\",\n    \"bf\" : \"burkina faso\",\n    \"bi\" : \"burundi\",\n    \"kh\" : \"cambodia\",\n    \"cm\" : \"cameroon\",\n    \"ca\" : \"canada\",\n    \"cf\" : \"central african republic\",\n    \"td\" : \"chad\",\n    \"cl\" : \"chile\",\n    \"cn\" : \"china\",\n    \"co\" : \"colombia\",\n    \"cd\" : \"congo (kinshasa)\",\n    \"cg\" : \"congo (brazzaville)\",\n    \"cr\" : \"costa rica\",\n    \"ci\" : \"cote d'ivoire\",\n    \"hr\" : \"croatia\",\n    \"cu\" : \"cuba\",\n    \"cy\" : \"cyprus\",\n    \"cz\" : \"czechia\",\n    \"dk\" : \"denmark\",\n    \"dj\" : \"djibouti\",\n    \"do\" : \"dominican republic\",\n    \"ec\" : \"ecuador\",\n    \"gq\" : \"equatorial guinea\",\n    \"eg\" : \"egypt\",\n    \"sv\" : \"el salvador\",\n    \"er\" : \"eritrea\",\n    \"ee\" : \"estonia\",\n    \"sz\" : \"eswatini\",\n    \"et\" : \"ethiopia\",\n    \"fi\" : \"finland\",\n    \"fr\" : \"france\",\n    \"ga\" : \"gabon\",\n    \"ge\" : \"georgia\",\n    \"gf\" : \"france, french guiana\",\n    \"de\" : \"germany\",\n    \"gh\" : \"ghana\",\n    \"gr\" : \"greece\",\n    \"gl\" : \"denmark, greenland\",\n    \"gt\" : \"guatemala\",\n    \"gn\" : \"guinea\",\n    \"gw\" : \"guinea-bissau\",\n    \"gy\" : \"guyana\",\n    \"ht\" : \"haiti\",\n    \"hn\" : \"honduras\",\n    \"hu\" : \"hungary\",\n    \"is\" : \"iceland\",\n    \"in\" : \"india\",\n    \"id\" : \"indonesia\",\n    \"ir\" : \"iran\",\n    \"iq\" : \"iraq\",\n    \"ie\" : \"ireland\",\n    \"il\" : \"israel\",\n    \"it\" : \"italy\",\n    \"jm\" : \"jamaica\",\n    \"jp\" : \"japan\",\n    \"jo\" : \"jordan\",\n    \"kz\" : \"kazakhstan\",\n    \"ke\" : \"kenya\",\n    \"xk\" : \"kosovo\",\n    \"kg\" : \"kyrgyzstan\",\n    \"la\" : \"laos\",\n    \"lv\" : \"latvia\",\n    \"ls\" : \"lesotho\",\n    \"lr\" : \"liberia\",\n    \"ly\" : \"libya\",\n    \"lt\" : \"lithuania\",\n    \"lu\" : \"luxembourg\",\n    \"mk\" : \"north macedonia\",\n    \"mw\" : \"malawi\",\n    \"my\" : \"malaysia\",\n    \"ml\" : \"mali\",\n    \"ma\" : \"morocco\",\n    \"md\" : \"moldova\",\n    \"me\" : \"montenegro\",\n    \"mg\" : \"madagascar\",\n    \"mr\" : \"mauritania\",\n    \"mz\" : \"mozambique\",\n    \"mm\" : \"burma\",\n    \"mn\" : \"mongolia\",\n    \"mx\" : \"mexico\",\n    \"na\" : \"namibia\",\n    \"np\" : \"nepal\",\n    \"nl\" : \"netherlands\",\n    \"nz\" : \"new zealand\",\n    \"ni\" : \"nicaragua\",\n    \"ne\" : \"niger\",\n    \"ng\" : \"nigeria\",\n    \"no\" : \"norway\",\n    \"om\" : \"oman\",\n    \"pk\" : \"pakistan\",\n    \"ps\" : \"palestine\",\n    \"pa\" : \"panama\",\n    \"pe\" : \"peru\",\n    \"pg\" : \"papua new guinea\",\n    \"py\" : \"paraguay\",\n    \"ph\" : \"philippines\",\n    \"pl\" : \"poland\",\n    \"pt\" : \"portugal\",\n    \"qa\" : \"qatar\",\n    \"ro\" : \"romania\",\n    \"ru\" : \"russia\",\n    \"rw\" : \"rwanda\",\n    \"sa\" : \"saudi arabia\",\n    \"sn\" : \"senegal\",\n    \"rs\" : \"serbia\",\n    \"sl\" : \"sierra leone\",\n    \"sk\" : \"slovakia\",\n    \"si\" : \"slovenia\",\n    \"so\" : \"somalia\",\n    \"za\" : \"south africa\",\n    \"kr\" : \"korea, south\",\n    \"es\" : \"spain\",\n    \"lk\" : \"sri lanka\",\n    \"se\" : \"sweden\",\n    \"sd\" : \"sudan\",\n    \"ss\" : \"south sudan\",\n    \"sr\" : \"suriname\",\n    \"ch\" : \"switzerland\",\n    \"sy\" : \"syria\",\n    \"tj\" : \"tajikistan\",\n    \"tz\" : \"tanzania\",\n    \"tg\" : \"togo\",\n    \"tn\" : \"tunisia\",\n    \"tm\" : \"turkmenistan\",\n    \"th\" : \"thailand\",\n    \"tr\" : \"turkey\",\n    \"tw\" : \"taiwan*\",\n    \"ug\" : \"uganda\",\n    \"ua\" : \"ukraine\",\n    \"ae\" : \"united arab emirates\",\n    \"gb\" : \"united kingdom\",\n    \"uy\" : \"uruguay\",\n    \"us\" : \"united states\",\n    \"uz\" : \"uzbekistan\",\n    \"ve\" : \"venezuela\",\n    \"vn\" : \"vietnam\",\n    \"eh\" : \"western sahara\",\n    \"ye\" : \"yemen\",\n    \"zm\" : \"zambia\",\n    \"zw\" : \"zimbabwe\",\n    // Provinces\n    // Australia\n    \"au-nsw\": \"australia, new south wales\",\n    \"au-qld\": \"australia, queensland\",\n    \"au-nt\": \"australia, northern territory\",\n    \"au-sa\": \"australia, south australia\",\n    \"au-wa\": \"australia, western australia\",\n    \"au-tas\": \"australia, tasmania\",\n    \"au-vic\": \"australia, victoria\",\n    \"au-act\": \"australia, australian capital territory\",\n    //China\n    \"cn-34\": \"china, anhui\",\n    \"cn-11\": \"china, beijing\",\n    \"cn-50\": \"china, chongqing\",\n    \"cn-35\": \"china, fujian\",\n    \"cn-44\": \"china, guangdong\",\n    \"cn-62\": \"china, gansu\",\n    \"cn-45\": \"china, guangxi\",\n    \"cn-52\": \"china, guizhou\",\n    \"cn-46\": \"china, hainan\",\n    \"cn-13\": \"china, hebei\",\n    \"cn-41\": \"china, henan\",\n    \"cn-91\": \"china, hong kong\",\n    \"cn-23\": \"china, heilongjiang\",\n    \"cn-43\": \"china, hunan\",\n    \"cn-42\": \"china, hubei\",\n    \"cn-22\": \"china, jilin\",\n    \"cn-32\": \"china, jiangsu\",\n    \"cn-36\": \"china, jiangxi\",\n    \"cn-21\": \"china, liaoning\",\n    \"cn-92\": \"china, macau\",\n    \"cn-15\": \"china, inner mongolia\",\n    \"cn-64\": \"china, ningxia\",\n    \"cn-63\": \"china, qinghai\",\n    \"cn-61\": \"china, shaanxi\",\n    \"cn-51\": \"china, sichuan\",\n    \"cn-37\": \"china, shandong\",\n    \"cn-31\": \"china, shanghai\",\n    \"cn-14\": \"china, shanxi\",\n    \"cn-12\": \"china, tianjin\",\n    \"cn-53\": \"china, yunnan\",\n    \"cn-33\": \"china, zhejiang\",\n    \"cn-54\": \"china, tibet\",\n    \"cn-65\": \"china, xinjiang\",\n    // Canada\n    \"ca-ab\": \"canada, alberta\",\n    \"ca-bc\": \"canada, british columbia\",\n    \"ca-mb\": \"canada, manitoba\",\n    \"ca-nb\": \"canada, new brunswick\",\n    \"ca-nl\": \"canada, newfoundland and labrador\",\n    \"ca-ns\": \"canada, nova scotia\",\n    \"ca-nt\": \"canada, northwest territories\",\n    \"ca-nu\": \"canada, nunavut\",\n    \"ca-on\": \"canada, ontario\",\n    \"ca-pe\": \"canada, prince edward island\",\n    \"ca-qc\": \"canada, quebec\",\n    \"ca-sk\": \"canada, saskatchewan\",\n    \"ca-yt\": \"canada, yukon\",\n    // US\n    \"us-al\": \"united states, alabama\",\n    \"us-az\": \"united states, arizona\",\n    \"us-ar\": \"united states, arkansas\",\n    \"us-ca\": \"united states, california\",\n    \"us-co\": \"united states, colorado\",\n    \"us-ct\": \"united states, connecticut\",\n    \"us-de\": \"united states, delaware\",\n    \"us-fl\": \"united states, florida\",\n    \"us-ga\": \"united states, georgia\",\n    \"us-ia\": \"united states, iowa\",\n    \"us-id\": \"united states, idaho\",\n    \"us-il\": \"united states, illinois\",\n    \"us-in\": \"united states, indiana\",\n    \"us-ks\": \"united states, kansas\",\n    \"us-ky\": \"united states, kentucky\",\n    \"us-la\": \"united states, louisiana\",\n    \"us-ma\": \"united states, massachusetts\",\n    \"us-md\": \"united states, maryland\",\n    \"us-me\": \"united states, maine\",\n    \"us-mi\": \"united states, michigan\",\n    \"us-mn\": \"united states, minnesota\",\n    \"us-mo\": \"united states, missouri\",\n    \"us-ms\": \"united states, mississippi\",\n    \"us-mt\": \"united states, montana\",\n    \"us-nc\": \"united states, north carolina\",\n    \"us-nd\": \"united states, north dakota\",\n    \"us-ne\": \"united states, nebraska\",\n    \"us-nh\": \"united states, new hampshire\",\n    \"us-nj\": \"united states, new jersey\",\n    \"us-nm\": \"united states, new mexico\",\n    \"us-nv\": \"united states, nevada\",\n    \"us-ny\": \"united states, new york\",\n    \"us-oh\": \"united states, ohio\",\n    \"us-ok\": \"united states, oklahoma\",\n    \"us-or\": \"united states, oregon\",\n    \"us-pa\": \"united states, pennsylvania\",\n    \"us-ri\": \"united states, rhode island\",\n    \"us-sd\": \"united states, south dakota\",\n    \"us-sc\": \"united states, south carolina\",\n    \"us-tn\": \"united states, tennessee\",\n    \"us-tx\": \"united states, texas\",\n    \"us-ut\": \"united states, utah\",\n    \"us-va\": \"united states, virginia\",\n    \"us-vt\": \"united states, vermont\",\n    \"us-wa\": \"united states, washington\",\n    \"us-wi\": \"united states, wisconsin\",\n    \"us-wv\": \"united states, west virginia\",\n    \"us-wy\": \"united states, wyoming\",\n}\n\nexport default countryNameDictionary;","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  componentJsonDictionary,\n  countryToIDDictionary,\n} from \"../../topojsons/\";\n\nimport MapStyling from \"./MapStyling\";\nimport createMapTooltip from \"./MapTooltip.js\";\nimport { VectorMap } from \"@south-paw/react-vector-maps\";\nimport countryNameDictionary from \"../../countryNameDictionary.js\";\nimport { Button, Grid, Popup, Header } from \"semantic-ui-react\";\nimport {\n  preprocessProvincialData,\n  getProcessedUSData,\n  capitalizeCountry,\n  calculateMapStats,\n  getProvinceColors,\n} from \"../../utilities\";\n\nconst Map = (props) => {\n  const [mapStats, setMapStats] = useState({});\n  const [provinceColors, setProvinceColors] = useState({\n    default: \"\",\n    provinces: \"\",\n  });\n\n  const countryId = countryToIDDictionary[props.country];\n  const [map, setMap] = useState(componentJsonDictionary[countryId]);\n\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n  const [tooltipText, setToolTipText] = useState(\"\");\n  const tooltipRef = useRef();\n\n  useEffect(() => {\n    if (Object.entries(props.data).length > 0) {\n      if (props.country === \"world\") {\n        setMapStats(calculateMapStats(preprocessProvincialData(props.data)));\n      } else if (props.country === \"united states\") {\n        // Handle US Data separately, it's a whole different chart and so is only fetched when called here\n        getProcessedUSData().then((rawData) => {\n          setMapStats(calculateMapStats(rawData));\n        });\n      } else {\n        setMapStats(calculateMapStats(props.data));\n      }\n    }\n  }, [props.data, props.country]);\n\n  useEffect(() => {\n    if (Object.keys(mapStats).length !== 0) {\n      setProvinceColors(\n        getProvinceColors({\n          currentCountry: props.country,\n          mapStats,\n          countryNameDictionary,\n        })\n      );\n    }\n  }, [mapStats, props.country]);\n\n  const onClick = ({ target }) => {\n    const id = target.attributes.id.value;\n    if (id in componentJsonDictionary) {\n      props.setCountry(countryNameDictionary[id]);\n      setMap(componentJsonDictionary[id]);\n    } else {\n    }\n  };\n\n  const onMouseEnter = ({ target }) => {\n    const hoveredCountry = target.attributes.name.value.toLowerCase();\n\n    setTooltipOpen(false);\n    setToolTipText(createMapTooltip(props.country, hoveredCountry, mapStats));\n    setTooltipOpen(true);\n    tooltipRef.current = target;\n  };\n\n  const onMouseLeave = () => {\n    setTooltipOpen(false);\n  };\n\n  const backClick = () => {\n    props.setCountry(\"world\");\n    setMap(componentJsonDictionary[\"worldLowRes\"]);\n  };\n\n  return (\n    <Grid.Column width={8}>\n      <MapStyling colors={provinceColors}>\n        <div>\n          <Header as=\"h1\" textAlign=\"center\">\n            {capitalizeCountry(props.country)}\n          </Header>\n          {props.country === \"world\" ? (\n            <div></div>\n          ) : (\n            <Button onClick={backClick}>World Map</Button>\n          )}\n        </div>\n        <VectorMap\n          {...map}\n          layerProps={{ onClick, onMouseEnter, onMouseLeave }}\n        />\n        <Popup\n          basic\n          context={tooltipRef}\n          position=\"bottom center\"\n          onClose={() => setTooltipOpen(false)}\n          open={tooltipOpen}\n        >\n          {tooltipText}\n        </Popup>\n      </MapStyling>\n    </Grid.Column>\n  );\n};\n\nexport default Map;\n","export const preprocessProvincialData = (countryData) => {\n  // Three countries (aus, can, china) are special cases that do not have nationwide statistics - create these\n  const specialCaseCountries = [\"Australia\", \"China\", \"Canada\"];\n  specialCaseCountries.forEach((country) => {\n    const nationwideData = { confirmed: [], recovered: [], deaths: [] };\n    // Find all the provinces for that country\n    Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n      if (provinceName.split(\",\")[0] === country) {\n        // Cycle through datasets and combine them\n        Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n          for (let i = 0; i < dataSet.length; i++) {\n            // Push in item from dataset if no point yet exists, else add totals together\n            const dataPoint = nationwideData[dataType][i];\n            if (dataPoint) {\n              const newTotal =\n                Number.parseInt(nationwideData[dataType][i][1]) +\n                Number.parseInt(dataSet[i][1]);\n              nationwideData[dataType][i][1] = newTotal;\n            } else {\n              nationwideData[dataType].push(dataSet[i]);\n            }\n          }\n        });\n      }\n    });\n    countryData[country] = nationwideData;\n  });\n  return countryData;\n};\n","import React from \"react\";\n\nconst TotalChartTooltip = ({ active, payload, label }) => {\n  const formatValue = (value) => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  if (active && payload && payload.length) {\n    return (\n      <div\n        className=\"custom-tooltip\"\n        style={{ textAlign: \"center\", background: \"rgba(255, 255, 255, 0.75)\" }}\n      >\n        <div className=\"label\">{`${label}`}</div>\n        {payload.map((dataPoint, index) => {\n          const dataType =\n            dataPoint.name[0].toUpperCase() + dataPoint.name.slice(1);\n          return (\n            <div className={dataType} key={index}>\n              {\" \"}\n              {`${dataType}: ${formatValue(dataPoint.value)}`}{\" \"}\n            </div>\n          );\n        })}\n        <div className=\"desc\">Click to set date back to {label}.</div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default TotalChartTooltip;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  formatTicks,\n  capitalizeCountry,\n  getLineData,\n} from \"../../../utilities\";\nimport TotalChartTooltip from \"./TotalChartTooltip\";\n\nconst TotalChart = ({ data, country, setDate }) => {\n  // Combine all three dataTypes into single items with all three values\n  const [lineData, setLineData] = useState([]);\n  useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      setLineData(getLineData(data));\n    }\n  }, [data]);\n\n  const capitalizedCountry = capitalizeCountry(country);\n\n  const handleSetDate = (e) => {\n    if (e !== null) {\n      setDate(e.activePayload[0].payload.date);\n    }\n  };\n\n  return (\n    <ResponsiveContainer height=\"50%\">\n      <AreaChart\n        data={lineData}\n        onClick={(e) => handleSetDate(e)}\n        style={{ cursor: \"pointer\" }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip content={<TotalChartTooltip />} />\n        <Legend verticalAlign=\"top\" height={36} />\n        <XAxis dataKey=\"date\" />\n        <YAxis\n          tickFormatter={(tick) => formatTicks(tick)}\n          label={{\n            value: `Total Overall Cases (${capitalizedCountry})`,\n            offset: 10,\n            angle: -90,\n            position: \"insideBottomLeft\",\n          }}\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"confirmed\"\n          stroke=\"#8884d8\"\n          fill=\"#8884d8\"\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"deaths\"\n          stroke=\"#f72e2e\"\n          fill=\"#f72e2e\"\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"recovered\"\n          stroke=\"#54ed40\"\n          fill=\"#54ed40\"\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default TotalChart;\n","export const getLineData = (data) => {\n  const ld = [];\n  for (let i = 0; i < data[\"confirmed\"].length; i++) {\n    ld.push({\n      date: data[\"confirmed\"][i].date,\n      confirmed: data[\"confirmed\"][i].total,\n      recovered: data[\"recovered\"][i].total,\n      deaths: data[\"deaths\"][i].total,\n    });\n  }\n  return ld;\n};\n","import React from \"react\";\n\nconst DailyChartTooltip = ({ active, payload, label }) => {\n  const formatValue = (value) => {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n  const capitalize = (string) => {\n    return string[0].toUpperCase() + string.slice(1);\n  };\n\n  if (active && payload && payload.length) {\n    return (\n      <div\n        className=\"custom-tooltip\"\n        style={{ textAlign: \"center\", background: \"rgba(255, 255, 255, 0.75)\" }}\n      >\n        <div className=\"label\">{`${label} (${capitalize(\"dataType\")})`}</div>\n        {payload.map((dataPoint, index) => {\n          const valueType = capitalize(dataPoint.name);\n          return (\n            <div className={valueType} key={index}>\n              {\" \"}\n              {`${valueType}: ${formatValue(dataPoint.value)}`}{\" \"}\n            </div>\n          );\n        })}\n        <div className=\"desc1\">Click to set date back to {label}.</div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default DailyChartTooltip;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport XAxis from \"recharts/lib/cartesian/XAxis\";\nimport YAxis from \"recharts/lib/cartesian/YAxis\";\nimport DailyChartTooltip from \"./DailyChartTooltip\";\nimport {\n  calculateDailyIncrease,\n  formatTicks,\n  capitalizeCountry,\n} from \"../../../utilities\";\n\nconst yAxisDict = {\n  confirmed: `New Confirmed Cases`,\n  recovered: `Daily Recovered`,\n  deaths: `Daily Deceased`,\n};\n\nconst DailyChart = ({ data, dataType, country, setDate }) => {\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    if (Object.keys(data).length !== 0) {\n      setChartData(calculateDailyIncrease(data[dataType]));\n    }\n  }, [data, dataType]);\n\n  const capitalizedCountry = capitalizeCountry(country);\n\n  const handleSetDate = (e) => {\n    if (e !== null) {\n      setDate(e.activePayload[0].payload.date);\n    }\n  };\n\n  return (\n    <ResponsiveContainer height=\"50%\">\n      <BarChart\n        data={chartData}\n        onClick={(e) => handleSetDate(e)}\n        style={{ cursor: \"pointer\" }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip content={<DailyChartTooltip />} />\n        <XAxis dataKey=\"date\" />\n        <YAxis\n          tickFormatter={(tick) => formatTicks(tick)}\n          label={{\n            value: `${yAxisDict[dataType]} (${capitalizedCountry})`,\n            offset: 15,\n            angle: -90,\n            position: \"insideBottomLeft\",\n          }}\n        />\n        <Bar barSize={10} dataKey=\"increase\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default DailyChart;\n","export const calculateDailyIncrease = (data) => {\n  const dailyIncrease = [];\n  if (data.length > 0) {\n    // Calculates the change between totals each day\n    // First one starts from 0 so just push the total\n    dailyIncrease.push({\n      date: data[0].date,\n      increase: Number.parseInt(data[0].total),\n    });\n    for (let i = 1; i < data.length; i++) {\n      const increase =\n        Number.parseInt(data[i].total) - Number.parseInt(data[i - 1].total);\n      if (increase > 0) {\n        dailyIncrease.push({ date: data[i].date, increase: increase });\n      }\n    }\n  }\n  return dailyIncrease;\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport TotalChart from \"./TotalChart\";\nimport DailyChart from \"./DailyChart\";\n\nimport { Grid, Button, Header } from \"semantic-ui-react\";\nimport { getFormattedDate, createGraphArrays } from \"../../utilities\";\n\nconst Charts = ({ data, dataType, country, date, setDate, resetDate }) => {\n  const [graphArrays, setGraphArrays] = useState({});\n\n  useEffect(() => {\n    setGraphArrays(createGraphArrays(data));\n  }, [data]);\n\n  return (\n    <Grid.Column className=\"charts\" width={8} style={{ maxHeight: \"50vh\" }}>\n      <Header as=\"h2\" textAlign=\"center\">\n        Date: {date !== null ? date : getFormattedDate()}\n      </Header>\n      {date !== null ? (\n        <Button onClick={() => resetDate()}>Revert to Present Date</Button>\n      ) : (\n        \"\"\n      )}\n      <TotalChart country={country} data={graphArrays} setDate={setDate} />\n      <DailyChart\n        country={country}\n        data={graphArrays}\n        dataType={dataType}\n        setDate={setDate}\n      />\n    </Grid.Column>\n  );\n};\n\nexport default Charts;\n\n// style = {{ width: \"50%\", float: \"right\", textAlign: \"right\"}}\n","export const createGraphArrays = (countryData) => {\n  // Combine the data for all provinces for given country, and produces an object the graphs can work with\n  const graphArrays = { confirmed: [], recovered: [], deaths: [] };\n  Object.entries(countryData).forEach(([provinceName, provinceData]) => {\n    Object.entries(provinceData).forEach(([dataType, dataSet]) => {\n      dataSet.forEach(([date, total], i) => {\n        if (graphArrays[dataType][i]) {\n          graphArrays[dataType][i] = {\n            ...graphArrays[dataType][i],\n            total: graphArrays[dataType][i].total + Number(total),\n          };\n        } else {\n          graphArrays[dataType][i] = { date: date, total: Number(total) };\n        }\n      });\n    });\n  });\n\n  return graphArrays;\n};\n","export const getFormattedDate = () => {\n  const presentDateObj = new Date();\n  const day = presentDateObj.getDate();\n  const month = presentDateObj.getMonth() + 1;\n  const year = presentDateObj.getFullYear().toString().slice(2);\n  return `${month}/${day}/${year}`;\n};\n","import * as d3 from \"d3\";\n\nexport const getSingularDataType = async (dataType) => {\n  // Sets one data type at a time, saves on copy/paste\n\n  const isSameDate = (dateObj1, dateObj2) =>\n    dateObj1.getDate() === dateObj2.getDate() &&\n    dateObj1.getMonth() === dateObj2.getMonth() &&\n    dateObj1.getFullYear() === dateObj2.getFullYear();\n\n  const cache = await caches.open(\"data.json\");\n  const url = `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_${dataType}_global.csv`;\n  const cachedData = await cache.match(url);\n  const dataDate = new Date(localStorage.getItem(\"dataDate\"));\n  if (cachedData === undefined || !isSameDate(new Date(), new Date(dataDate))) {\n    const response = await fetch(url);\n    const csvString = await response.text();\n    const rawData = await d3.csvParse(csvString);\n    cache.put(url, new Response(JSON.stringify(rawData)));\n    localStorage.setItem(\"dataDate\", new Date());\n    return { [dataType]: rawData };\n  } else {\n    const rawData = await cachedData.json();\n    return { [dataType]: rawData };\n  }\n};\n","import { getSingularDataType } from \"./getSingularDataType\";\nexport const getAllDataTypes = async () => {\n  // Sets all 3 data types\n  let returnObj = {};\n  await Promise.all([\n    getSingularDataType(\"confirmed\"),\n    getSingularDataType(\"deaths\"),\n    getSingularDataType(\"recovered\"),\n  ]).then((dataTypes) => {\n    for (let i = 0; i < dataTypes.length; i++) {\n      returnObj = { ...returnObj, ...dataTypes[i] };\n    }\n  });\n  return returnObj;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\n\nimport Statistics from \"../Statistics\";\nimport Map from \"../Map\";\nimport Charts from \"../Charts\";\n\nimport { getAllDataTypes, getCountryData } from \"../../requests\";\nimport {\n  createCountryTimeSeries,\n  filterCountryDataByDate,\n  formatCountryNameCamelCase,\n} from \"../../utilities\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst MainPage = ({ country }) => {\n  const [data, setData] = useState({ data: {}, isFetching: true });\n  const [USData] = useState({ data: {}, isFetching: true });\n  const [dataType, setDataType] = useState(\"confirmed\");\n  const [countryData, setCountryData] = useState({\n    original: {},\n    timeLimited: {},\n  });\n  const [dateLimit, setDateLimit] = useState(null);\n\n  useEffect(() => {\n    getAllDataTypes().then((rawData) => {\n      setData({ rawData, isFetching: false });\n    });\n  }, []);\n\n  // Create time series for all countries based on raw data (for use in components)\n\n  // Side effect for changing country based on clicking on map\n  useEffect(() => {\n    // Create countryData, if for world, do for all countries, each country functions as a \"province\"\n    if (!data.isFetching) {\n      const originalCountryData = createCountryTimeSeries(\n        getCountryData(data, country)\n      );\n      setCountryData({\n        original: originalCountryData,\n        timeLimited: originalCountryData,\n      });\n    }\n  }, [country, data, USData]);\n\n  // Side effect for changing date based on clicking on chart\n  useEffect(() => {\n    if (dateLimit !== null) {\n      setCountryData((currentData) => ({\n        ...currentData,\n        timeLimited: filterCountryDataByDate(countryData, dateLimit),\n      }));\n    }\n  }, [dateLimit, countryData.original]);\n\n  const handleDateReset = () => {\n    setDateLimit(null);\n    const originalCountryData = countryData.original;\n    setCountryData({\n      original: originalCountryData,\n      timeLimited: originalCountryData,\n    });\n  };\n\n  const navigate = useNavigate();\n  const handleCountryClick = (country) => {\n    navigate(`/${formatCountryNameCamelCase(country)}`, { replace: true });\n  };\n\n  return (\n    <div className=\"App\">\n      <Statistics data={countryData.timeLimited} handleClick={setDataType} />\n      <Grid stackable columns={2}>\n        <Map\n          setCountry={handleCountryClick}\n          country={country}\n          data={countryData.timeLimited}\n        />\n        <Charts\n          country={country}\n          data={countryData.timeLimited}\n          dataType={dataType}\n          date={dateLimit}\n          resetDate={handleDateReset}\n          setDate={setDateLimit}\n        />\n      </Grid>\n    </div>\n  );\n};\n\nexport default MainPage;\n\n// Write a userducer that can replace all of the timeseries/statistics functionality, and can be passed down into all the children more simply (just state + dispatch)\n// Then possibly could even rewrite this to perform the async data functionality (it would have to be set with this so probably you have to do it anyway?)\n","export const getCountryData = (data, country) => {\n  if (country === \"world\") {\n    return data.rawData;\n  } else {\n    const countryData = {};\n    Object.entries(data.rawData).forEach(([dataType, dataSet]) => {\n      countryData[dataType] = dataSet.filter(\n        (obj) => obj[\"Country/Region\"].toLowerCase() === country\n      );\n    });\n    return countryData;\n  }\n};\n","import React from \"react\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport MainPage from \"./components/MainPage\";\nimport countryNameDictionary from \"./countryNameDictionary\";\nimport { formatCountryNameCamelCase } from \"./utilities\";\n\nconst App = () => {\n  const countryNames = Object.values(countryNameDictionary);\n  countryNames.push(\"world\");\n  return (\n    <BrowserRouter>\n      <Routes>\n        {countryNames.map((countryName, index) => {\n          return (\n            <Route\n              key={index}\n              path={`/${formatCountryNameCamelCase(countryName)}`}\n              element={<MainPage country={countryName} />}\n            />\n          );\n        })}\n        <Route path=\"*\" element={<Navigate to=\"/world\" replace />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n\n// Bugs \n// States color being set to that of country rather than individual state\n// Clean up all warning\n\n// Nice to have\n// Some countries lack maps, possibly a way to fix this? If not no big deal\n"],"sourceRoot":""}